BBP_algorithmThe Bailey–Borwein–Plouffe formula (BBP formula) is a formula for . It was discovered in 1995 by Simon Plouffe and is named after the authors of the article in which it was published, David H. Bailey, Peter Borwein, and Plouffe.[1] Before that, it had been published by Plouffe on his own site.[2] The formula isThe BBP formula gives rise to a spigot algorithm for computing the nth base-16 (hexadecimal) digit of  (and therefore also the 4nth binary digit of ) without computing the preceding digits. This does not compute the nth decimal of  (i.e., in base 10).[3] But another formula discovered by Plouffe in 2022 allows extracting the nth digit of  in decimal.[4] BBP and BBP-inspired algorithms have been used in projects such as PiHex[5] for calculating many digits of  using distributed computing. The existence of this formula came as a surprise. It had been widely believed that computing the nth digit of  is just as hard as computing the first n digits.[1]Since its discovery, formulas of the general formhave been discovered for many other irrational numbers , where  and  are polynomials with integer coefficients and  is an integer base.Formulas of this form are known as BBP-type formulas.[6] Given a number , there is no known systematic algorithm for finding appropriate , , and ; such formulas are discovered experimentally.A specialization of the general formula that has produced many results iswhere s, b, and m are integers, and  is a sequence of integers.The P function leads to a compact notation for some solutions. For example, the original BBP formula can be written asSome of the simplest formulae of this type that were well known before BBP and for which the P function leads to a compact notation, are:(In fact, this identity holds true for a &gt; 1:.)Plouffe was also inspired by the arctan power series of the form (the P notation can be also generalized to the case where b is not an integer):Using the P function mentioned above, the simplest known formula for  is for s = 1, but m &gt; 1. Many now-discovered formulae are known for b as an exponent of 2 or 3 and m as an exponent of 2 or it some other factor-rich value, but where several of the terms of sequence A are zero. The discovery of these formulae involves a computer search for such linear combinations after computing the individual sums. The search procedure consists of choosing a range of parameter values for s, b, and m, evaluating the sums out to many digits, and then using an integer relation-finding algorithm (typically Helaman Ferguson's PSLQ algorithm) to find a sequence A that adds up those intermediate sums to a well-known constant or perhaps to zero.The original BBP  summation formula was found in 1995 by Plouffe using PSLQ. It is also representable using the P function above:which also reduces to this equivalent ratio of two polynomials:This formula has been shown through a fairly simple proof to equal .[7]We would like to define a formula that returns the nth hexadecimal digit of .  A few manipulations are required to implement a spigot algorithm using this formula.We must first rewrite the formula asNow, for a particular value of n and taking the first sum, we split the sum to infinity across the nth term:We now multiply by 16n, so that the hexadecimal point (the divide between fractional and integer parts of the number) is in the nth place:Since we only care about the fractional part of the sum, we look at our two terms and realise that only the first sum is able to produce whole numbers; conversely, the second sum cannot produce whole numbers, since the numerator can never be larger than the denominator for k &gt; n. Therefore, we need a trick to remove the whole numbers for the first sum. That trick is to reduce modulo  8k + 1. Our sum for the first fractional part then becomesNotice how the modulus operator always guarantees that only the fractional sum will be kept.  To calculate 16n−k mod (8k + 1) quickly and efficiently, the modular exponentiation algorithm is used.  When the running product becomes greater than one, the modulus is taken, just as for the running total in each sum.Now to complete the calculation, this must be applied to each of the four sums in turn. Once this is done, the four summations are put back into the sum to :Since only the fractional part is accurate, extracting the wanted digit requires that one removes the integer part of the final sum and multiplies by 16 to "skim off" the hexadecimal digit at this position (in theory, the next few digits up to the accuracy of the calculations used would also be accurate).This process is similar to performing long multiplication, but only having to perform the summation of some middle columns. While there are some carries that are not counted, computers usually perform arithmetic for many bits (32 or 64) and round, and we are only interested in the most significant digit(s). There is a possibility that a particular computation will be akin to failing to add a small number (e.g. 1) to the number 999999999999999, and that the error will propagate to the most significant digit.This algorithm computes  without requiring custom data types having thousands or even millions of digits. The method calculates the nth digit without calculating the first n − 1 digits and can use small, efficient data types.Though the BBP formula can directly calculate the value of any given digit of  with less computational effort than formulas that must calculate all intervening digits, BBP remains linearithmic (), whereby successively larger values of n require increasingly more time to calculate; that is, the "further out" a digit is, the longer it takes BBP to calculate it, just like the standard -computing algorithms.[8]D. J. Broadhurst provides a generalization of the BBP algorithm that may be used to compute a number of other constants in nearly linear time and logarithmic space.[9]  Explicit results are given for Catalan's constant, , , Apéry's constant , ,  (where  is the Riemann zeta function), , , , and various products of powers of  and . These results are obtained primarily by the use of polylogarithm ladders.Approximations of Experimental mathematicsBellard's formulaD. J. Broadhurst, "Polylogarithmic ladders, hypergeometric series and the ten millionth digits of ζ(3) and ζ(5)", (1998) arXiv math.CA/9803067Richard J. Lipton, "Making An Algorithm An Algorithm — BBP", weblog post, July 14, 2010.Richard J. Lipton, "Cook’s Class Contains Pi", weblog post, March 15, 2009.Bailey, David H. "A compendium of BBP-type formulas for mathematical constants, updated 15 Aug 2017" .David H. Bailey, "BBP Code Directory", web page with links to Bailey's code implementing the BBP algorithm, September 8, 2006.