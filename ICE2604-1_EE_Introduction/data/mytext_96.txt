bidirectional_bubble_sortCocktail shaker sortClassSorting algorithmData structureArrayWorst-case performanceBest-case performanceAverage performanceWorst-case space complexityCocktail shaker sort,[1] also known as bidirectional bubble sort,[2] cocktail sort, shaker sort (which can also refer to a variant of selection sort), ripple sort, shuffle sort,[3] or shuttle sort, is an extension of bubble sort.  The algorithm extends bubble sort by operating in two directions.  While it improves on bubble sort by more quickly moving items to the beginning of the list, it provides only marginal performance improvements. Like most variants of bubble sort, cocktail shaker sort is used primarily as an educational tool. More performant algorithms such as quicksort, merge sort, or timsort are used by the sorting libraries built into popular programming languages such as Python and Java.[4][5]The simplest form goes through the whole list each time:procedure cocktailShakerSort(A : list of sortable items) is    do        swapped := false        for each i in 0 to length(A) − 2 do:            if A[i] &gt; A[i + 1] then                 swap(A[i], A[i + 1])                 swapped := true            end if        end for        if not swapped then                        break do-while loop        end if        swapped := false        for each i in length(A) − 2 to 0 do:            if A[i] &gt; A[i + 1] then                swap(A[i], A[i + 1])                swapped := true            end if        end for    while swapped end procedureThe first rightward pass will shift the largest element to its correct place at the end, and the following leftward pass will shift the smallest element to its correct place at the beginning. The second complete pass will shift the second largest and second smallest elements to their correct places, and so on. After i passes, the first i and the last i elements in the list are in their correct positions, and do not need to be checked. By shortening the part of the list that is sorted each time, the number of operations can be halved (see bubble sort).This is an example of the algorithm in MATLAB/OCTAVE with the optimization of remembering the last swap index and updating the bounds.Cocktail shaker sort is a slight variation of bubble sort.[1] It differs in that instead of repeatedly passing through the list from bottom to top, it passes alternately from bottom to top and then from top to bottom. It can achieve slightly better performance than a standard bubble sort. The reason for this is that bubble sort only passes through the list in one direction and therefore can only move items backward one step each iteration.An example of a list that proves this point is the list (2,3,4,5,1), which would only need to go through one pass of cocktail sort to become sorted, but if using an ascending bubble sort would take four passes. However one cocktail sort pass should be counted as two bubble sort passes. Typically cocktail sort is less than two times faster than bubble sort.Another optimization can be that the algorithm remembers where the last actual swap has been done. In the next iteration, there will be no swaps beyond this limit and the algorithm has shorter passes. As the cocktail shaker sort goes bidirectionally, the range of possible swaps, which is the range to be tested, will reduce per pass, thus reducing the overall running time slightly.The complexity of the cocktail shaker sort in big O notation is  for both the worst case and the average case, but it becomes closer to  if the list is mostly ordered before applying the sorting algorithm. For example, if every element is at a position that differs by at most k (k ≥ 1) from the position it is going to end up in, the complexity of cocktail shaker sort becomes The cocktail shaker sort is also briefly discussed in the book The Art of Computer Programming, along with similar refinements of bubble sort. In conclusion, Knuth states about bubble sort and its improvements:But none of these refinements leads to an algorithm better than straight insertion [that is, insertion sort]; and we already know that straight insertion isn't suitable for large N. [...] In short, the bubble sort seems to have nothing to recommend it, except a catchy name and the fact that it leads to some interesting theoretical problems.Hartenstein, R. (July 2010). "A new World Model of Computing" . The Grand Challenge to Reinvent Computing. Belo Horizonte, Brazil: CSBC. Archived from the original  on 2013-08-07.Interactive demo of cocktail sortJava source code and an animated demo of cocktail sort (called bi-directional bubble sort) and several other algorithms".NET Implementation of cocktail sort and several other algorithms". Archived from the original on 2012-02-12.