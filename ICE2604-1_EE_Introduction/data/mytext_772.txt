polynomial_hierarchyIn computational complexity theory, the polynomial hierarchy (sometimes called the polynomial-time hierarchy) is a hierarchy of complexity classes that generalize the classes NP and co-NP.[1] Each class in the hierarchy is contained within PSPACE. The hierarchy can be defined using oracle machines or alternating Turing machines. It is a resource-bounded counterpart to the arithmetical hierarchy and analytical hierarchy from mathematical logic. The union of the classes in the hierarchy is denoted PH.Classes within the hierarchy have complete problems (with respect to polynomial-time reductions) which ask if quantified Boolean formulae hold, for formulae with restrictions on the quantifier order. It is known that equality between classes on the same level or consecutive levels in the hierarchy would imply a "collapse" of the hierarchy to that level.There are multiple equivalent definitions of the classes of the polynomial hierarchy.For the oracle definition of the polynomial hierarchy, definewhere P is the set of decision problems solvable in polynomial time. Then for i ≥ 0 definewhere  is the set of decision problems solvable in polynomial time by a Turing machine augmented by an oracle for some complete problem in class A; the classes  and  are defined analogously.  For example, , and  is the class of problems solvable in polynomial time by a deterministic Turing machine with an oracle for some NP-complete problem.[2]For the existential/universal definition of the polynomial hierarchy, let  be a language (i.e. a decision problem, a subset of {0,1}*), let  be a polynomial, and definewhere  is some standard encoding of the pair of binary strings x and w as a single binary string. L represents a set of ordered pairs of strings, where the first string x is a member of , and the second string w is a "short" () witness testifying that x is a member of . In other words,  if and only if there exists a short  witness w such that . Similarly, defineNote that De Morgan's laws hold:  and , where Lc is the complement of L.Let  be a class of languages. Extend these operators to work on whole classes of languages by the definitionAgain, De Morgan's laws hold:  and , where .The classes NP and co-NP can be defined as , and , where P is the class of all feasibly (polynomial-time) decidable languages. The polynomial hierarchy can be defined recursively asNote that , and .This definition reflects the close connection between the polynomial hierarchy and the arithmetical hierarchy, where R and RE play roles analogous to P and NP, respectively. The analytic hierarchy is also defined in a similar way to give a hierarchy of subsets of the real numbers.An alternating Turing machine is a non-deterministic Turing machine with non-final states partitioned into existential and universal states. It is eventually accepting from its current configuration if: it is in an existential state and can transition into some eventually accepting configuration; or, it is in a universal state and every transition is into some eventually accepting configuration; or, it is in an accepting state.[3]We define  to be the class of languages accepted by an alternating Turing machine in polynomial time such that the initial state is an existential state and every path the machine can take swaps at most k – 1 times between existential and universal states. We define  similarly, except that the initial state is a universal state.[4]If we omit the requirement of at most k – 1 swaps between the existential and universal states, so that we only require that our alternating Turing machine runs in polynomial time, then we have the definition of the class AP, which is equal to PSPACE.[5]The union of all classes in the polynomial hierarchy is the complexity class PH.The definitions imply the relations:Unlike the arithmetic and analytic hierarchies, whose inclusions are known to be proper, it is an open question whether any of these inclusions are proper, though it is widely believed that they all are.  If any , or if any , then the hierarchy collapses to level k: for all , .[6] In particular, we have the following implications involving unsolved problems:P = NP if and only if P = PH.[7]If NP = co-NP then NP = PH. (co-NP is .)The case in which NP = PH is also termed as a collapse of the PH to the second level. The case P = NP corresponds to a collapse of PH to P.The question of collapse to the first level is generally thought to be extremely difficult. Most researchers do not believe in a collapse, even to the second level.The polynomial hierarchy is an analogue (at much lower complexity) of the exponential hierarchy and arithmetical hierarchy.It is known that PH is contained within PSPACE, but it is not known whether the two classes are equal. One useful reformulation of this problem is that PH = PSPACE if and only if second-order logic over finite structures gains no additional power from the addition of a transitive closure operator.If the polynomial hierarchy has any complete problems, then it has only finitely many distinct levels.  Since there are PSPACE-complete problems, we know that if PSPACE = PH, then the polynomial hierarchy must collapse, since a PSPACE-complete problem would be a -complete problem for some k.[8]Each class in the polynomial hierarchy contains -complete problems (problems complete under polynomial-time many-one reductions). Furthermore, each class in the polynomial hierarchy is closed under -reductions: meaning that for a class  in the hierarchy and a language , if , then  as well. These two facts together imply that if  is a complete problem for , then , and . For instance, . In other words, if a language is defined based on some oracle in , then we can assume that it is defined based on a complete problem for . Complete problems therefore act as "representatives" of the class for which they are complete.The Sipser–Lautemann theorem states that the class BPP is contained in the second level of the polynomial hierarchy.Kannan's theorem states that for any k,  is not contained in SIZE(nk).Toda's theorem states that the polynomial hierarchy is contained in P#P.EXPTIMEExponential hierarchyArithmetic hierarchyArora, Sanjeev; Barak, Boaz (2009). Complexity Theory: A Modern Approach. Cambridge University Press. ISBN 978-0-521-42426-4. section 1.4, "Machines as strings and the universal Turing machine" and 1.7, "Proof of theorem 1.9"A. R. Meyer and L. J. Stockmeyer.  The Equivalence Problem for Regular Expressions with Squaring Requires Exponential Space.  In Proceedings of the 13th IEEE Symposium on Switching and Automata Theory, pp. 125–129, 1972.  The paper that introduced the polynomial hierarchy.L. J. Stockmeyer. The polynomial-time hierarchy. Theoretical Computer Science, vol.3, pp. 1–22, 1976.C. Papadimitriou. Computational Complexity. Addison-Wesley, 1994. Chapter 17. Polynomial hierarchy, pp. 409–438.Michael R. Garey and David S. Johnson (1979). Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. Freeman. ISBN 0-7167-1045-5. Section 7.2: The Polynomial Hierarchy, pp. 161–167.