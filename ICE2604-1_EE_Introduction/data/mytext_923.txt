single-source_shortest-path_problemGraph and treesearch algorithmsα–β pruningBacktrackingBeam searchBest-first searchBranch &amp; boundBreadth-First Search (BFS)British MuseumDepth-First Search (DFS)Hill climbingIterative Deepening DFS (IDDFS)Lexicographic BFSShortest pathA*B*Bellman–FordBidirectional searchD*Dijkstra'sFloyd–WarshallFringe searchIterative Deepening (IDA*)Johnson'sJump point searchKruskal'sLifelong Planning A* (LPA*)PathfindingSMA*ListsGraph algorithmsSearch algorithmsList of graph algorithmsRelated topicsDynamic programmingGraph coloringGraph traversalMinimum spanning treeSearch gamesThreaded binary treeTree traversalIn graph theory, the shortest path problem is the problem of finding a path between two vertices (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.The problem of finding the shortest path between two intersections on a road map may be modeled as a special case of the shortest path problem in graphs, where the vertices correspond to intersections and the edges correspond to road segments, each weighted by the length of the segment.The shortest path problem can be defined for graphs whether undirected, directed, or mixed.It is defined here for undirected graphs; for directed graphs the definition of pathrequires that consecutive vertices be connected by an appropriate directed edge.Two vertices are adjacent when they are both incident to a common edge.A path in an undirected graph is a sequence of vertices such that  is adjacent to  for .Such a path  is called a path of length from  to .(The  are variables; their numbering here relates to their position in the sequence and needs not to relate to any canonical labeling of the vertices.)Let  be the edge incident to both  and . Given a real-valued weight function , and an undirected (simple) graph , the shortest path from  to  is the path  (where  and ) that over all possible  minimizes the sum  When each edge in the graph has unit weight or , this is equivalent to finding the path with fewest edges.The problem is also sometimes called the single-pair shortest path problem, to distinguish it from the following variations:The single-source shortest path problem, in which we have to find shortest paths from a source vertex v to all other vertices in the graph.The single-destination shortest path problem, in which we have to find shortest paths from all vertices in the directed graph to a single destination vertex v. This can be reduced to the single-source shortest path problem by reversing the arcs in the directed graph.The all-pairs shortest path problem, in which we have to find shortest paths between every pair of vertices v, v'  in the graph.These generalizations have significantly more efficient algorithms than the simplistic approach of running a single-pair shortest path algorithm on all relevant pairs of vertices.The most important algorithms for solving this problem are:Dijkstra's algorithm solves the single-source shortest path problem with non-negative edge weight.Bellman–Ford algorithm solves the single-source problem if edge weights may be negative.A* search algorithm solves for single-pair shortest path using heuristics to try to speed up the search.Floyd–Warshall algorithm solves all pairs shortest paths.Johnson's algorithm solves all pairs shortest paths, and may be faster than Floyd–Warshall on sparse graphs.Viterbi algorithm solves the shortest stochastic path problem with an additional probabilistic weight on each node.Additional algorithms and associated evaluations may be found in Cherkassky, Goldberg &amp; Radzik (1996).WeightsTime complexityAuthor+O(V2)Dijkstra 1959+O((E + V) log V)Johnson 1977 (binary heap)+O(E + V log V)Fredman &amp; Tarjan 1984 (Fibonacci heap)O(E)Thorup 1999 (requires constant-time multiplication)AlgorithmTime complexityAuthorBreadth-first searchO(E + V)An algorithm using topological sorting can solve the single-source shortest path problem in time  in arbitrarily-weighted DAGs.[1]The following table is taken from Schrijver (2004), with some corrections and additions.A green background indicates an asymptotically best bound in the table; L is the maximum length (or weight) among all edges, assuming integer edge weights.WeightsAlgorithmTime complexityAuthorFord 1956Bellman–Ford algorithmShimbel 1955, Bellman 1958, Moore 1959Dantzig 1960Dijkstra's algorithm with listLeyzorek et al. 1957, Dijkstra 1959, Minty (see Pollack &amp; Wiebenson 1960), Whiting &amp; Hillier 1960Dijkstra's algorithm with binary heapJohnson 1977Dijkstra's algorithm with Fibonacci heapFredman &amp; Tarjan 1984, Fredman &amp; Tarjan 1987Dial's algorithm[2] (Dijkstra's algorithm using a bucket queue with L buckets)Dial 1969Johnson 1981, Karlsson &amp; Poblete 1983Gabow's algorithmGabow 1983, Gabow 1985Ahuja et al. 1990ThorupThorup 2004WeightsAlgorithmTime complexityAuthorO(V 2EL)Ford 1956Bellman–Ford algorithmO(VE)Shimbel 1955, Bellman 1958, Moore 1959Johnson-Dijkstra with binary heapO(V (E + log V))Johnson 1977Johnson-Dijkstra with Fibonacci heapO(V (E + log V))Fredman &amp; Tarjan 1984, Fredman &amp; Tarjan 1987, adapted after Johnson 1977Johnson's technique applied to Dial's algorithm[2]O(V (E + L))Dial 1969, adapted after Johnson 1977Finds a negative cycle or calculates distances to all vertices.WeightsAlgorithmTime complexityAuthorAndrew V. GoldbergWeightsAlgorithmTime complexityAuthorHenzinger et al. 1997The all-pairs shortest path problem finds the shortest paths between every pair of vertices ,  in the graph.  The all-pairs shortest paths problem for unweighted directed graphs was introduced by Shimbel (1953), who observed that it could be solved by a linear number of matrix multiplications that takes a total time of .WeightsTime complexityAlgorithm+Floyd–Warshall algorithmSeidel's algorithm (expected running time)Williams 2014+Pettie &amp; Ramachandran 2002Thorup 1999 applied to every vertex (requires constant-time multiplication).WeightsTime complexityAlgorithm (no negative cycles)Floyd–Warshall algorithmWilliams 2014 (no negative cycles)Johnson–Dijkstra (no negative cycles)Pettie 2004Hagerup 2000Shortest path algorithms are applied to automatically find directions between physical locations, such as driving directions on web mapping websites like MapQuest or Google Maps. For this application fast specialized algorithms are available.[3]If one represents a nondeterministic abstract machine as a graph where vertices describe states and edges describe possible transitions, shortest path algorithms can be used to find an optimal sequence of choices to reach a certain goal state, or to establish lower bounds on the time needed to reach a given state. For example, if vertices represent the states of a puzzle like a Rubik's Cube and each directed edge corresponds to a single move or turn, shortest path algorithms can be used to find a solution that uses the minimum possible number of moves.In a networking or telecommunications mindset, this shortest path problem is sometimes called the min-delay path problem and usually tied with a widest path problem. For example, the algorithm may seek the shortest (min-delay) widest path, or widest shortest (min-delay) path.A more lighthearted application is the games of "six degrees of separation" that try to find the shortest path in graphs like movie stars appearing in the same film.Other applications, often studied in operations research, include plant and facility layout, robotics, transportation, and VLSI design.[4]A road network can be considered as a graph with positive weights. The nodes represent road junctions and each edge of the graph is associated with a road segment between two junctions. The weight of an edge may correspond to the length of the associated road segment, the time needed to traverse the segment, or the cost of traversing the segment. Using directed edges it is also possible to model one-way streets. Such graphs are special in the sense that some edges are more important than others for long-distance travel (e.g. highways). This property has been formalized using the notion of highway dimension.[5] There are a great number of algorithms that exploit this property and are therefore able to compute the shortest path a lot quicker than would be possible on general graphs.All of these algorithms work in two phases. In the first phase, the graph is preprocessed without knowing the source or target node. The second phase is the query phase. In this phase, source and target node are known. The idea is that the road network is static, so the preprocessing phase can be done once and used for a large number of queries on the same road network.The algorithm with the fastest known query time is called hub labeling and is able to compute shortest path on the road networks of Europe or the US in a fraction of a microsecond.[6] Other techniques that have been used are:ALT (A* search, landmarks, and triangle inequality)Arc flagsContraction hierarchiesTransit node routingReach-based pruningLabelingHub labelsFor shortest path problems in computational geometry, see Euclidean shortest path.The shortest multiple disconnected path [7] is a representation of the primitive path network within the framework of Reptation theory. The widest path problem seeks a path so that the minimum label of any edge is as large as possible.Other related problems may be classified into the following categories.Unlike the shortest path problem, which can be solved in polynomial time in graphs without negative cycles, shortest path problems which include additional constraints on the desired solution path are called Constrained Shortest Path First, and are harder to solve. One example is the constrained shortest path problem,[8] which attempts to minimize the total cost of the path while at the same time maintaining another metric below a given threshold. This makes the problem NP-complete (such problems are not believed to be efficiently solvable for large sets of data, see P = NP problem). Another NP-complete example requires a specific set of vertices to be included in the path,[9] which makes the problem similar to the Traveling Salesman Problem (TSP).  The TSP is the problem of finding the shortest path that goes through every vertex exactly once, and returns to the start. The problem of finding the longest path in a graph is also NP-complete.The Canadian traveller problem and the stochastic shortest path problem are generalizations where either the graph isn't completely known to the mover, changes over time, or where actions (traversals) are probabilistic. [10] [11]Sometimes, the edges in a graph have personalities: each edge has its own selfish interest. An example is a communication network, in which each edge is a computer that possibly belongs to a different person. Different computers have different transmission speeds, so every edge in the network has a numeric weight equal to the number of milliseconds it takes to transmit a message. Our goal is to send a message between two points in the network in the shortest time possible. If we know the transmission-time of each computer (the weight of each edge), then we can use a standard shortest-paths algorithm. If we do not know the transmission times, then we have to ask each computer to tell us its transmission-time. But, the computers may be selfish: a computer might tell us that its transmission time is very long, so that we will not bother it with our messages.  A possible solution to this problem is to use a variant of the VCG mechanism, which gives the computers an incentive to reveal their true weights.In some cases, the main goal is not to find the shortest path, but only to detect if the graph contains a negative cycle. Some shortest-paths algorithms can be used for this purpose:The Bellman–Ford algorithm can be used to detect a negative cycle in time .Cherkassky and Goldberg[12] survey several other algorithms for negative cycle detection.Many problems can be framed as a form of the shortest path for some suitably substituted notions of addition along a path and taking the minimum.  The general approach to these is to consider the two operations to be those of a semiring. Semiring multiplication is done along the path, and the addition is between paths. This general framework is known as the algebraic path problem.[13][14][15]Most of the classic shortest-path algorithms (and new ones) can be formulated as solving linear systems over such algebraic structures.[16]More recently, an even more general framework for solving these (and much less obviously related problems) has been developed under the banner of valuation algebras.[17]In real-life situations, the transportation network is usually stochastic and time-dependent. In fact, a traveler traversing a link daily may experiences different travel times on that link due not only to the fluctuations in travel demand (origin-destination matrix) but also due to such incidents as work zones, bad weather conditions, accidents and vehicle breakdowns. As a result, a stochastic time-dependent (STD) network is a more realistic representation of an actual road network compared with the deterministic one.[18][19]Despite considerable progress during the course of the past decade, it remains a controversial question how an optimal path should be defined and identified in stochastic road networks. In other words, there is no unique definition of an optimal path under uncertainty. One possible and common answer to this question is to find a path with the minimum expected travel time. The main advantage of using this approach is that efficient shortest path algorithms introduced for the deterministic networks can be readily employed to identify the path with the minimum expected travel time in a stochastic network. However, the resulting optimal path identified by this approach may not be reliable, because this approach fails to address travel time variability. To tackle this issue some researchers use distribution of travel time instead of expected value of it so they find the probability distribution of total travelling time using different optimization methods such as dynamic programming and Dijkstra's algorithm .[20] These methods use stochastic optimization, specifically stochastic dynamic programming to find the shortest path in networks with probabilistic arc length.[21] The concept of travel time reliability is used interchangeably with travel time variability in the transportation research literature, so that, in general, one can say that the higher the variability in travel time, the lower the reliability would be, and vice versa.In order to account for travel time reliability more accurately, two common alternative definitions for an optimal path under uncertainty have been suggested. Some have introduced the concept of the most reliable path, aiming to maximize the probability of arriving on time or earlier than a given travel time budget. Others, alternatively, have put forward the concept of an α-reliable path based on which they intended to minimize the travel time budget required to ensure a pre-specified on-time arrival probability.Bidirectional search, an algorithm that finds the shortest path between two vertices on a directed graphEuclidean shortest pathFlow networkK shortest path routingMin-plus matrix multiplicationPathfindingShortest Path BridgingShortest path treeTRILL (TRansparent Interconnection of Lots of Links)Frigioni, D.; Marchetti-Spaccamela, A.; Nanni, U. (1998). "Fully dynamic output bounded single source shortest path problem". Proc. 7th Annu. ACM-SIAM Symp. Discrete Algorithms. Atlanta, GA. pp. 212–221. CiteSeerX .Dreyfus, S. E. (October 1967). An Appraisal of Some Shortest Path Algorithms  (Report). Project Rand. United States Air Force. RM-5433-PR. Archived  from the original on November 17, 2015. DTIC AD-661265.