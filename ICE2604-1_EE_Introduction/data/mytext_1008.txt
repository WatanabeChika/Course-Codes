temporal_logicIn logic, temporal logic is any system of rules and symbolism for representing, and reasoning about, propositions qualified in terms of time (for example, "I am always hungry", "I will eventually be hungry", or "I will be hungry until I eat something"). It is sometimes also used to refer to tense logic, a modal logic-based system of temporal logic introduced by Arthur Prior in the late 1950s, with important contributions by Hans Kamp. It has been further developed by computer scientists, notably Amir Pnueli, and logicians.Temporal logic has found an important application in formal verification, where it is used to state requirements of hardware or software systems. For instance, one may wish to say that whenever a request is made, access to a resource is eventually granted, but it is never granted to two requestors simultaneously. Such a statement can conveniently be expressed in a temporal logic.Consider the statement "I am hungry". Though its meaning is constant in time, the statement's truth value can vary in time. Sometimes it is true, and sometimes false, but never simultaneously true and false. In a temporal logic, a statement can have a truth value that varies in time—in contrast with an atemporal logic, which applies only to statements whose truth values are constant in time. This treatment of truth-value over time differentiates temporal logic from computational verb logic.Temporal logic always has the ability to reason about a timeline. So-called "linear-time" logics are restricted to this type of reasoning. Branching-time logics, however, can reason about multiple timelines. This permits in particular treatment of environments that may act unpredictably.To continue the example, in a branching-time logic we may state that "there is a possibility that I will stay hungry forever", and that "there is a possibility that eventually I am no longer hungry". If we do not know whether or not I will ever be fed, these statements can both be true.Although Aristotle's logic is almost entirely concerned with the theory of the categorical syllogism, there are passages in his work that are now seen as anticipations of temporal logic, and may imply an early, partially developed form of first-order temporal modal bivalent logic. Aristotle was particularly concerned with the problem of future contingents, where he could not accept that the principle of bivalence applies to statements about future events, i.e. that we can presently decide if a statement about a future event is true or false, such as "there will be a sea battle tomorrow".[1]There was little development for millennia, Charles Sanders Peirce noted in the 19th century:[2]Time has usually been considered by logicians to be what is called 'extralogical' matter. I have never shared this opinion. But I have thought that logic had not yet reached the state of development at which the introduction of temporal modifications of its forms would not result in great confusion; and I am much of that way of thinking yet.Surprisingly for Peirce, the first system of temporal logic was constructed, as far as we know, in the first half of 20th century. Although Arthur Prior is widely known as a founder of temporal logic, the first formalization of such logic was provided in 1947 by Polish logician, Jerzy Łoś.[3] In his work Podstawy Analizy Metodologicznej Kanonów Milla (The Foundations of a Methodological Analysis of Mill’s Methods) he presented a formalization of Mill's canons. In Łoś' approach, emphasis was placed on the time factor. Thus, to reach his goal, he had to create a logic that could provide means for formalization of temporal functions. The logic could be seen as a byproduct of Łoś' main aim,[4] albeit it was the first positional logic that, as a framework, was used later for Łoś' inventions in epistemic logic. The logic itself has syntax very different than Prior's tense logic, which uses modal operators. The language of Łoś' logic rather uses a realization operator, specific to positional logic, which binds the expression with the specific context in which its truth-value is considered. In Łoś' work this considered context was only temporal, thus expressions were binded with specific moments or intervals of time.In the following years, research of temporal logic by Arthur Prior began.[4] He was concerned with the philosophical implications of free will and predestination. According to his wife, he first considered formalizing temporal logic in 1953. Results of his research were firstly presented at the conference in Wellington in 1954.[4] The system Prior presented, was similar syntactically to Łoś' logic, although not until 1955 did he explicitly refer to Łoś' work, in the last section of Appendix 1 in Prior’s Formal Logic.[4]Prior gave lectures on the topic at the University of Oxford in 1955–6, and in 1957 published a book, Time and Modality, in which he introduced a propositional modal logic with two temporal connectives (modal operators), F and P, corresponding to "sometime in the future" and "sometime in the past". In this early work, Prior considered time to be linear. In 1958 however, he received a letter from Saul Kripke, who pointed out that this assumption is perhaps unwarranted. In a development that foreshadowed a similar one in computer science, Prior took this under advisement, and developed two theories of branching time, which he called "Ockhamist" and "Peircean".[2][] Between 1958 and 1965 Prior also corresponded with Charles Leonard Hamblin, and a number of early developments in the field can be traced to this correspondence, for example Hamblin implications. Prior published his most mature work on the topic, the book Past, Present, and Future in 1967. He died two years later.[5]Along with tense logic, Prior constructed a few systems of positional logic, which inherited their main ideas from Łoś.[6] Work in positional temporal logics was continued by Nicholas Rescher in the 60s and 70s. In such works as Note  on  Chronological  Logic (1966), On  the  Logic  of  Chronological  Propositions (1968), Topological Logic (1968), and Temporal Logic (1971) he researched connections between Łoś' and Prior's systems. Moreover he proved that Prior's tense operators could be defined using a realization operator in specific positional logics.[6] Rescher, in his work, also created more general systems of positional logics. Although the first ones were constructed for purely temporal uses, he proposed the term topological logics for logics that were meant to contain a realization operator but had no specific temporal axioms—like the clock axiom.The binary temporal operators Since and Until were introduced by Hans Kamp in his 1968 Ph.D. thesis,[7] which also contains an important result relating temporal logic to first-order logic—a result now known as Kamp's theorem.[8][2][9]Two early contenders in formal verifications were linear temporal logic, a linear-time logic by Amir Pnueli, and computation tree logic (CLT), a branching-time logic by Mordechai Ben-Ari, Zohar Manna and Amir Pnueli. An almost equivalent formalism to CTL was suggested around the same time by E. M. Clarke and E. A. Emerson. The fact that the second logic can be decided more efficiently than the first does not reflect on branching- and linear-time logics in general, as has sometimes been argued. Rather, Emerson and Lei show that any linear-time logic can be extended to a branching-time logic that can be decided with the same complexity.Łoś’ logic was published as his 1947 master’s thesis Podstawy Analizy Metodologicznej Kanonów Milla (The Foundations of a Methodological Analysis of Mill’s Methods).[10] His philosophical and formal concepts could be seen as continuations of those of the Lviv–Warsaw School of Logic, as his supervisor was Jerzy Słupecki, disciple of Jan Łukasiewicz. The paper was not translated into English until 1977, although Henryk Hiż presented in 1951 a brief, but informative, review in the Journal of Symbolic Logic. This review contained core concepts of Łoś’ work and was enough to popularize his results among the logical community. The main aim of this work was to present Mill's canons in the framework of formal logic. To achieve this goal the author researched the importance of temporal functions in the structure of Mill's concept. Having that, he provided his axiomatic system of logic that would fit as a framework for Mill's canons along with their temporal aspects.The language of the logic first published in Podstawy Analizy Metodologicznej Kanonów Milla (The Foundations of a Methodological Analysis of Mill’s Methods) consisted of:[3]first-order logic operators  ‘¬’, ‘∧’, ‘∨’, ‘→’, ‘≡’, ‘∀’ and ‘∃’realization operator Ufunctional symbol δpropositional variables p1,p2,p3,...variables denoting time moments t1,t2,t3,...variables denoting time intervals n1,n2,n3,...The set of terms (denoted by S) is constructed as follows:variables denoting time moments or intervals are termsif  and  is a time interval variable, then The set of formulas (denoted by For) is constructed as follows:[10]all first-order logic formulas are validif  and  is a propositional variable, then if , then if  and , then if  and  and υ is a propositional, moment or interval variable, then The sentential tense logic introduced in Time and Modality has four (non-truth-functional) modal operators (in addition to all usual truth-functional operators in first-order propositional logic.[11]P: "It was the case that..." (P stands for "past")F: "It will be the case that..." (F stands for "future")G: "It always will be the case that..."H: "It always was the case that..."These can be combined if we let π be an infinite path:[12]: "At a certain point,  is true at all future states of the path": " is true at infinitely many states on the path"From P and F one can define G and H, and vice versa:A minimal syntax for TL is specified with the following BNF grammar:where a is some atomic formula.[13]Kripke models are used to evaluate the truth of sentences in TL. A pair (T, &lt;) of a set T and a binary relation &lt; on T (called "precedence") is called a frame. A model is given by triple (T, &lt;, V) of a frame and a function V called a valuation that assigns to each pair (a, u) of an atomic formula and a time value some truth value. The notion "ϕ is true in a model U=(T, &lt;, V) at time u" is abbreviated U⊨ϕ[u]. With this notation,[14]Statement... is true just whenU⊨a[u]V(a,u)=trueU⊨¬ϕ[u]not U⊨ϕ[u]U⊨(ϕ∧ψ)[u]U⊨ϕ[u] and U⊨ψ[u]U⊨(ϕ∨ψ)[u]U⊨ϕ[u] or U⊨ψ[u]U⊨(ϕ→ψ)[u]U⊨ψ[u] if U⊨ϕ[u]U⊨Gϕ[u]U⊨ϕ[v] for all v with u&lt;vU⊨Hϕ[u]U⊨ϕ[v] for all v with v&lt;uGiven a class F of frames, a sentence ϕ of TL isvalid with respect to F if for every model U=(T,&lt;,V) with (T,&lt;) in F and for every u in T, U⊨ϕ[u]satisfiable with respect to F if there is a model U=(T,&lt;,V) with (T,&lt;) in F such that for some u in T, U⊨ϕ[u]a consequence of a sentence ψ with respect to F if for every model U=(T,&lt;,V) with (T,&lt;) in F and for every u in T, if U⊨ψ[u], then U⊨ϕ[u]Many sentences are only valid for a limited class of frames. It is common to restrict the class of frames to those with a relation &lt; that is transitive, antisymmetric, reflexive, trichotomic, irreflexive, total, dense, or some combination of these.Burgess outlines a logic that makes no assumptions on the relation &lt;, but allows for meaningful deductions, based on the following axiom schema:[15]A where A is a tautology of first-order logicG(A→B)→(GA→GB)H(A→B)→(HA→HB)A→GPAA→HFAwith the following rules of deduction:given A→B and A, deduce B (modus ponens)given a tautology A, infer GAgiven a tautology A, infer HAOne can derive the following rules:Becker's rule: given A→B, deduce TA→TB where T is a tense, any sequence made of G, H, F, and P.Mirroring: given a theorem A, deduce its mirror statement A§, which is obtained by replacing G by H (and so F by P) and vice versa.Duality: given a theorem A, deduce its dual statement A*, which is obtained by interchanging ∧ with ∨, G with F, and H with P.Burgess gives a Meredith translation from statements in TL into statements in first-order logic with one free variable x0 (representing the present moment). This translation M is defined recursively as follows:[16]where  is the sentence  with all variable indices incremented by 1 and  is a one-place predicate defined by .Temporal logic has two kinds of operators: logical operators and modal operators.[17] Logical operators are usual truth-functional operators (). The modal operators used in linear temporal logic and computation tree logic are defined as follows.TextualSymbolicDefinitionExplanationDiagramBinary operators U Until:  holds at the current or a future position, and  has to hold until that position. At that position  does not have to hold any more. R Release:  releases  if  is true up until and including the first position in which  is true (or forever if such a position does not exist).Unary operatorsN Next:  has to hold at the next state. (X is used synonymously.)F Future:  eventually has to hold (somewhere on the subsequent path).G Globally:  has to hold on the entire subsequent path.A All:  has to hold on all paths starting from the current state.E Exists: there exists at least one path starting from the current state where  holds.Alternate symbols:operator R is sometimes denoted by VThe operator W is the weak until operator:  is equivalent to Unary operators are well-formed formulas whenever  is well-formed. Binary operators are well-formed formulas whenever  and  are well-formed.In some logics, some operators cannot be expressed. For example, N operator cannot be expressed in temporal logic of actions.Temporal logics include:Some systems of positional logicLinear temporal logic (LTL) temporal logic without branching timelinesComputation tree logic (CTL) temporal logic with branching timelinesInterval temporal logic (ITL)Temporal logic of actions (TLA)Signal temporal logic (STL)[18]Timestamp temporal logic (TTL)[19]Property specification language (PSL)CTL*, which generalizes LTL and CTLHennessy–Milner logic (HML)Modal μ-calculus, which includes as a subset HML and CTL*Metric temporal logic (MTL)[20]Metric interval temporal logic (MITL)[18]Timed propositional temporal logic (TPTL)Truncated Linear Temporal Logic (TLTL)[21]Hyper temporal logic (HyperLTL) [22]A variation, closely related to temporal or chronological or tense logics, are modal logics based upon "topology", "place", or "spatial position".[23][24]HPO formalismKripke structureAutomata theoryChomsky grammarState transition systemDuration calculus (DC)Hybrid logicTemporal logic in finite-state verificationImportant publications in formal verification (including the use of temporal logic in formal verification)Reo Coordination LanguageModal logicResearch Materials: Max Planck Society ArchiveMordechai Ben-Ari, Zohar Manna, Amir Pnueli: The Temporal Logic of Branching Time. POPL 1981: 164–176Amir Pnueli: The Temporal Logic of Programs FOCS 1977: 46–57Venema, Yde, 2001, "Temporal Logic," in Goble, Lou, ed., The Blackwell Guide to Philosophical Logic. Blackwell.E. A. Emerson and Chin-Laung Lei, "Modalities for model checking: branching time logic strikes back", in Science of Computer Programming 8, pp. 275–306, 1987.E. A. Emerson, "Temporal and modal logic", Handbook of Theoretical Computer Science, Chapter 16, the MIT Press, 1990A Practical Introduction to PSL, Cindy Eisner, Dana FismanVardi, Moshe Y. (2008). "From Church and Prior to PSL".  In Orna Grumberg; Helmut Veith (eds.). 25 years of model checking: history, achievements, perspectives. Springer. ISBN 978-3-540-69849-4. preprint. Historical perspective on how seemingly disparate ideas came together in computer science and engineering. (The mention of Church in the title of this paper is a reference to a little-known 1957 paper, in which Church proposed a way to perform hardware verification.)Peter Øhrstrøm; Per F. V. Hasle (1995). Temporal logic: from ancient ideas to artificial intelligence. Springer. ISBN 978-0-7923-3586-3.Stanford Encyclopedia of Philosophy: "Temporal Logic"—by Anthony Galton.Temporal Logic by Yde Venema, formal description of syntax and semantics, questions of axiomatization. Treating also Kamp's dyadic temporal operators (since, until)Notes on games in temporal logic by Ian Hodkinson, including a formal description of first-order temporal logicCADP – provides generic model checkers for various temporal logicPAT is a powerful free model checker, LTL checker, simulator and refinement checker for CSP and its extensions (with shared variable, arrays, wide range of fairness).