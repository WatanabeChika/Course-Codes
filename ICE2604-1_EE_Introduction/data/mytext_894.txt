semidefinite_programmingSemidefinite programming (SDP) is a subfield of convex optimization concerned with the optimization of a linear objective function (a user-specified function that the user wants to minimize or maximize)over the intersection of the cone of positive semidefinite matrices with an affine space, i.e., a spectrahedron.Semidefinite programming is a relatively new field of optimization which is of growing interest for several reasons. Many practical problems in operations research and combinatorial optimization can be modeled or approximated as semidefinite programming problems. In automatic control theory, SDPs are used in the context of linear matrix inequalities.  SDPs are in fact a special case of cone programming and can be efficiently solved by interior point methods.All linear programs and (convex) quadratic programs can be expressed as SDPs, and via hierarchies of SDPs the solutions of polynomial optimization problems can be approximated.  Semidefinite programming has been used in the optimization of complex systems. In recent years, some quantum query complexity problems have been formulated in terms of semidefinite programs.A linear programming problem is one in which we wish to maximize or minimize a linear objective function of real variables over a polytope. In semidefinite programming, we instead use real-valued vectors and are allowed to take the dot product of vectors; nonnegativity constraints on real variables in LP (linear programming) are replaced by semidefiniteness constraints on matrix variables in SDP (semidefinite programming). Specifically, a general semidefinite programming problem can be defined as any mathematical programming problem of the formwhere the , and the  are real numbers and  is the dot product of  and  .An  matrix  is said to be positive semidefinite if it is the Gram matrix of some vectors (i.e. if there exist vectors  such that  for all ). If this is the case, we denote this as . Note that there are several other equivalent definitions of being positive semidefinite, for example, positive semidefinite matrices are self-adjoint matrices that have only non-negative eigenvalues.Denote by  the space of all  real symmetric matrices.  The space is equipped with the inner product (where  denotes the trace)We can rewrite the mathematical program given in the previous section equivalently aswhere entry  in  is given by  from the previous section and  is a symmetric  matrix having th entry  from the previous section. Thus, the matrices   and  are symmetric and the above inner products are well-defined.Note that if we add slack variables appropriately, this SDP can be converted to one of the formFor convenience, an SDP may be specified in a slightly different, but equivalent form.  For example, linear expressions involving nonnegative scalar variables may be added to the program specification.  This remains an SDP because each variable can be incorporated into the matrix  as a diagonal entry ( for some ).  To ensure that , constraints  can be added for all .  As another example, note that for any positive semidefinite matrix , there exists a set of vectors  such that the ,  entry of  is  the scalar product of  and .  Therefore, SDPs are often formulated in terms of linear expressions on scalar products of vectors.  Given the solution to the SDP in the standard form, the vectors  can be recovered in  time (e.g., by using an incomplete Cholesky decomposition of X).Analogously to linear programming, given a general SDP of the form(the primal problem or P-SDP), we define the dual semidefinite program (D-SDP) aswhere for any two matrices  and ,  means .The weak duality theorem states that the value of the primal SDP is at least the value of the dual SDP.  Therefore, any feasible solution to the dual SDP lower-bounds the primal SDP value, and conversely, any feasible solution to the primal SDP upper-bounds the dual SDP value.  This is becausewhere the last inequality is because both matrices are positive semidefinite, and the result of this function is sometimes referred to as duality gap.When the value of the primal and dual SDPs are equal, the SDP is said to satisfy the strong duality property. Unlike linear programs, where every dual linear program has optimal objective equal to the primal objective, not every SDP satisfies strong duality; in general, the value of the dual SDP may lie strictly below the value of the primal, and the P-SDP and D-SPD satisfy the following properties:(i) Suppose the primal problem (P-SDP) is bounded below and strictlyfeasible (i.e., there exists such that , ).Then there is an optimal solution  to (D-SDP) and(ii) Suppose the dual problem (D-SDP) is bounded above and strictlyfeasible (i.e., for some ).Then there is an optimal solution  to (P-SDP) andthe equality from (i) holds.A sufficient condition for strong duality to hold for a SDP problem (and in general, for any convex optimization problem) is the Slater's condition. It is also possible to attain strong duality for SDPs without additional regularity conditions by using an extended dual problem proposed by Ramana.[1][2]Consider three random variables , , and .  By definition, their correlation coefficients  are valid if and only ifin which case this matrix is called the correlation matrix. Suppose that we know from some prior knowledge (empirical results of an experiment, for example) that  and .  The problem of determining the smallest and largest values that  can take is given by:We set  to obtain the answer.  This can be formulated by an SDP.  We handle the inequality constraints by augmenting the variable matrix and introducing slack variables, for exampleSolving this SDP gives the minimum and maximum values of  as  and  respectively.Consider the problemminimize subject to where we assume that  whenever .Introducing an auxiliary variable  the problem can be reformulated:minimize subject to In this formulation, the objective is a linear function of the variables .The first restriction can be written aswhere the matrix  is the square matrix with values in the diagonal equalto the elements of the vector .The second restriction can be written asDefining  as followsWe can use the theory of Schur Complements to see that(Boyd and Vandenberghe, 1996)The semidefinite program associated with this problem isminimize subject to Semidefinite programs are important tools for developing approximation algorithms for NP-hard maximization problems.  The first approximation algorithm based on an SDP is due to Michel Goemans and David P. Williamson (JACM, 1995).  They studied the max cut problem: Given a graph G = (V, E), output a partition of the vertices V so as to maximize the number of edges crossing from one side to the other.  This problem can be expressed as an integer quadratic program:Maximize  such that each .Unless P = NP, we cannot solve this maximization problem efficiently.  However, Goemans and Williamson observed a general three-step procedure for attacking this sort of problem:Relax the integer quadratic program into an SDP.Solve the SDP (to within an arbitrarily small additive error ).Round the SDP solution to obtain an approximate solution to the original integer quadratic program.For max cut, the most natural relaxation is such that , where the maximization is over vectors  instead of integer scalars.This is an SDP because the objective function and constraints are all linear functions of vector inner products.  Solving the SDP gives a set of unit vectors in ; since the vectors are not required to be collinear, the value of this relaxed program can only be higher than the value of the original quadratic integer program.  Finally, a rounding procedure is needed to obtain a partition.  Goemans and Williamson simply choose a uniformly random hyperplane through the origin and divide the vertices according to which side of the hyperplane the corresponding vectors lie.  Straightforward analysis shows that this procedure achieves an expected approximation ratio (performance guarantee) of 0.87856 - Îµ.  (The expected value of the cut is the sum over edges of the probability that the edge is cut, which is proportional to the angle  between the vectors at the endpoints of the edge over .  Comparing this probability to , in expectation the ratio is always at least 0.87856.)  Assuming the unique games conjecture, it can be shown that this approximation ratio is essentially optimal.Since the original paper of Goemans and Williamson, SDPs have been applied to develop numerous approximation algorithms.  Recently, Prasad Raghavendra has developed a general framework for constraint satisfaction problems based on the unique games conjecture.[3]There are several types of algorithms for solving SDPs.  These algorithms output the value of the SDP up to an additive error  in time that is polynomial in the program description size and .There are also facial reduction algorithms that can be used to preprocess SDPs problems by inspecting the constraints of the problem. These can be used to detect lack of strict feasibility, to delete redundant rows and columns, and also to reduce the size of the variable matrix.[4]Most codes are based on interior point methods (CSDP, MOSEK, SeDuMi, SDPT3, DSDP, SDPA). Robust and efficient for general linear SDP problems. Restricted by the fact that the algorithms are second-order methods and need to store and factorize a large (and often dense) matrix. Theoretically, the state-of-the-art high-accuracy SDP algorithms[5][6] are based on this approach.First-order methods for conic optimization avoid computing, storing and factorizing a large Hessian matrix and scale to much larger problems than interior point methods, at some cost in accuracy. A first-order method is implemented in the Splitting Cone Solver (SCS).[7] Another first-order method is the alternating direction method of multipliers (ADMM).[8] This method requires in every step projection on the cone of semidefinite matrices.The code ConicBundle formulates the SDP problem as a nonsmooth optimization problem and solves it by the Spectral Bundle method of nonsmooth optimization. This approach is very efficient for a special class of linear SDP problems.Algorithms based on Augmented Lagrangian method (PENSDP) are similar in behavior to the interior point methods and can be specialized to some very large scale problems. Other algorithms use low-rank information and reformulation of the SDP as a nonlinear programming problem (SDPLR).[9]Algorithms that solve SDPs approximately have been proposed as well. The main goal of such methods is to achieve lower complexity in applications where approximate solutions are sufficient and complexity must be minimal. A prominent method that has been used for data detection in multiple-input multiple-output (MIMO) wireless systems is Triangular Approximate SEmidefinite Relaxation (TASER),[10] which operates on the Cholesky decomposition factors of the semidefinite matrix instead of the semidefinite matrix. This method calculates approximate solutions for a max-cut-like problem that are often comparable to solutions from exact solvers but in only 10-20 algorithm iterations.Semidefinite programming has been applied to find approximate solutions to combinatorial optimization problems, such as the solution of the max cut problem with an approximation ratio of 0.87856.  SDPs are also used in geometry to determine tensegrity graphs, and arise in control theory as LMIs, and in inverse elliptic coefficient problems as convex, non-linear, semidefiniteness constraints.[11] It is also widely used in physics to constrain conformal field theories with the conformal bootstrap.[12]Lieven Vandenberghe, Stephen Boyd, "Semidefinite Programming", SIAM Review 38, March 1996, pp.Â 49â95. pdfMonique Laurent, Franz Rendl, "Semidefinite Programming and Integer Programming", Report PNA-R0210, CWI, Amsterdam, April 2002. optimization-onlineE. de Klerk, "Aspects of Semidefinite Programming: Interior Point Algorithms and Selected Applications", Kluwer Academic Publishers, March 2002, ISBNÂ 1-4020-0547-4.Robert M. Freund, "Introduction to Semidefinite Programming (SDP), SDP-IntroductionLinks to introductions and events in the fieldLecture notes from LÃ¡szlÃ³ LovÃ¡sz on Semidefinite Programming