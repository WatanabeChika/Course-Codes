pairing_heapIt is requested that a computing diagram or diagrams  be included in this article to improve its quality. Specific illustrations, plots or diagrams can be requested at the Graphic Lab.For more information, refer to discussion on this page and/or the listing at Wikipedia:Requested images. Pairing heapTypeheapInvented1986Invented byMichael L. Fredman, Robert Sedgewick, Daniel Sleator, and Robert Endre TarjanTime complexity in big O notationAlgorithmAverageWorst caseInsertΘ(1)Find-minΘ(1) Delete-minO(log n) Decrease-keyO(log n)MergeΘ(1) A pairing heap is a type of heap data structure with relatively simple implementation and excellent practical amortized performance, introduced by Michael Fredman, Robert Sedgewick, Daniel Sleator, and Robert Tarjan in 1986.[1]Pairing heaps are heap-ordered multiway tree structures, and can be considered simplified Fibonacci heaps. They are considered a "robust choice" for implementing such algorithms as Prim's MST algorithm,[2] and support the following operations (assuming a min-heap):find-min: simply return the top element of the heap.meld: compare the two root elements, the smaller remains the root of the result, the larger element and its subtree is appended as a child of this root.insert: create a new heap for the inserted element and meld into the original heap.decrease-key (optional): remove the subtree rooted at the key to be decreased, replace the key with a smaller key, then meld the result back into the heap.delete-min: remove the root and do repeated melds of its subtrees until one tree remains.  Various merging strategies are employed.The analysis of pairing heaps' time complexity was initially inspired by that of splay trees.[1]The amortized time per delete-min is , and the operations find-min, meld, and insert run in  amortized time.[3]When a decrease-key operation is added as well, determining the precise asymptotic running time of pairing heaps has turned out to be difficult. Initially, the time complexity of this operation was conjectured on empirical grounds to be ,[4] but Fredman proved that the amortized time per decrease-key is at least  for some sequences of operations.[5]Using a different amortization argument, Pettie then proved that insert, meld, and decrease-key all run in  amortized time, which is .[6]Elmasry later introduced elaborations of pairing heaps (lazy, consolidate) for which decrease-key runs in  amortized time and other operations have optimal amortized bounds,[7][8] but no tight  bound is known for the original data structure.[3][6]Although the asymptotic performance of pairing heaps is worse than other priority queue algorithms such as Fibonacci heaps, which perform decrease-key in  amortized time, the performance in practice is excellent. Jones[9]and Larkin, Sen, and Tarjan[10]conducted experiments on pairing heaps and other heap data structures.  They concluded that d-ary heaps such as binary heaps are faster than all other heap implementations when the decrease-key operation is not needed (and hence there is no need to externally track the location of nodes in the heap), but that when decrease-key is needed pairing heaps are often faster than d-ary heaps and almost always faster than other pointer-based heaps, including data structures like Fibonacci heaps that are theoretically more efficient. Chen et al.[11] examined priority queues specifically for use with Dijkstra's algorithm and concluded that in normal cases using a d-ary heap without decrease-key (instead duplicating nodes on the heap and ignoring redundant instances) resulted in better performance, despite the inferior theoretical performance guarantees.A pairing heap is either an empty heap, or a pairing tree consisting of a root element and a possibly empty list of pairing trees. The heap ordering property requires that parent of any node is no greater than the node itself. The following description assumes a purely functional heap that does not support the decrease-key operation.type PairingTree[Elem] = Heap(elem: Elem, subheaps: List[PairingTree[Elem]])type PairingHeap[Elem] = Empty | PairingTree[Elem]A pointer-based implementation for RAM machines, supporting decrease-key, can be achieved using three pointers per node, by representing the children of a node by a singly-linked list: a pointer to the node's first child, one to its next sibling, and one to its previous sibling (or, for the leftmost sibling, to its parent). Alternatively, the previous-pointer can be omitted by letting the last child point back to the parent, if a single boolean flag is added to indicate "end of list". This achieves a more compact structure at the expense of a constant overhead factor per operation.[1]The function find-min simply returns the root element of the heap:function find-min(heap: PairingHeap[Elem]) -&gt; Elem    if heap is Empty        error    else        return heap.elemMelding with an empty heap returns the other heap, otherwise a new heap is returned that has the minimum of the two root elements as its root element and just adds the heap with the larger root to the list of subheaps:function meld(heap1, heap2: PairingHeap[Elem]) -&gt; PairingHeap[Elem]    if heap1 is Empty        return heap2    elsif heap2 is Empty        return heap1    elsif heap1.elem &lt; heap2.elem        return Heap(heap1.elem, heap2 :: heap1.subheaps)    else        return Heap(heap2.elem, heap1 :: heap2.subheaps)The easiest way to insert an element into a heap is to meld the heap with a new heap containing just this element and an empty list of subheaps:function insert(elem: Elem, heap: PairingHeap[Elem]) -&gt; PairingHeap[Elem]    return meld(Heap(elem, []), heap)The only non-trivial fundamental operation is the deletion of the minimum element from the heap. This requires performing repeated melds of its children until only one tree remains.    The standard strategy first melds the subheaps in pairs (this is the step that gave this data structure its name) from left to right and then melds the resulting list of heaps from right to left:function delete-min(heap: PairingHeap[Elem]) -&gt; PairingHeap[Elem]    if heap is Empty        error    else        return merge-pairs(heap.subheaps)This uses the auxiliary function merge-pairs:function merge-pairs(list: List[PairingTree[Elem]]) -&gt; PairingHeap[Elem]    if length(list) == 0        return Empty    elsif length(list) == 1        return list[0]    else        return meld(meld(list[0], list[1]), merge-pairs(list[2..]))That this does indeed implement the described two-pass left-to-right then right-to-left merging strategy can be seen from this reduction:   merge-pairs([H1, H2, H3, H4, H5, H6, H7])=&gt; meld(meld(H1, H2), merge-pairs([H3, H4, H5, H6, H7]))     # meld H1 and H2 to H12, then the rest of the list=&gt; meld(H12, meld(meld(H3, H4), merge-pairs([H5, H6, H7])))     # meld H3 and H4 to H34, then the rest of the list=&gt; meld(H12, meld(H34, meld(meld(H5, H6), merge-pairs([H7]))))     # meld H5 and H6 to H56, then the rest of the list=&gt; meld(H12, meld(H34, meld(H56, H7)))     # switch direction, meld the last two resulting heaps, giving H567=&gt; meld(H12, meld(H34, H567))     # meld the last two resulting heaps, giving H34567=&gt; meld(H12, H34567)      # finally, meld the first pair with the result of merging the rest=&gt; H1234567Here are time complexities[12] of various heap data structures. Function names assume a min-heap.  For the meaning of "O(f)" and "Θ(f)" see Big O notation.Operationfind-mindelete-mininsertdecrease-keymeldBinary[12]Θ(1)Θ(log n)O(log n)O(log n)Θ(n)LeftistΘ(1)Θ(log n)Θ(log n)O(log n)Θ(log n)Binomial[12][13]Θ(1)Θ(log n)Θ(1)[a]Θ(log n)O(log n)[b]Fibonacci[12][14]Θ(1)O(log n)[a]Θ(1)Θ(1)[a]Θ(1)Pairing[3]Θ(1)O(log n)[a]Θ(1)o(log n)[a][c]Θ(1)Brodal[17][d]Θ(1)O(log n)Θ(1)Θ(1)Θ(1)Rank-pairing[19]Θ(1)O(log n)[a]Θ(1)Θ(1)[a]Θ(1)Strict Fibonacci[20]Θ(1)O(log n)Θ(1)Θ(1)Θ(1)2–3 heap[21]O(log n)O(log n)[a]O(log n)[a]Θ(1)?Louis Wasserman discusses pairing heaps and their implementation in Haskell in The Monad Reader, Issue 16 (pp. 37–52).pairing heaps, Sartaj Sahni