sublinear_time_algorithmIn computer science, the time complexity is the computational complexity that describes the amount of computer time it takes to run an algorithm. Time complexity is commonly estimated by counting the number of elementary operations performed by the algorithm, supposing that each elementary operation takes a fixed amount of time to perform. Thus, the amount of time taken and the number of elementary operations performed by the algorithm are taken to be related by a constant factor.Since an algorithm's running time may vary among different inputs of the same size, one commonly considers the worst-case time complexity, which is the maximum amount of time required for inputs of a given size. Less common, and usually specified explicitly, is the average-case complexity, which is the average of the time taken on inputs of a given size (this makes sense because there are only a finite number of possible inputs of a given size). In both cases, the time complexity is generally expressed as a function of the size of the input.[1] Since this function is generally difficult to compute exactly, and the running time for small inputs is usually not consequential, one commonly focuses on the behavior of the complexity when the input size increases—that is, the asymptotic behavior of the complexity. Therefore, the time complexity is commonly expressed using big O notation, typically , , , , etc., where  is the size in units of bits needed to represent the input.Algorithmic complexities are classified according to the type of function appearing in the big O notation. For example, an algorithm with time complexity  is a linear time algorithm and an algorithm with time complexity  for some constant  is a polynomial time algorithm.The following table summarizes some classes of commonly encountered time complexities. In the table, , i.e., polynomial in x.NameComplexity classRunning time )Examples of running timesExample algorithmsconstant time10Finding the median value in a sorted array of numbers.Calculating  inverse Ackermann timeAmortized time per operation using a disjoint setiterated logarithmic timeDistributed coloring of cycleslog-logarithmicAmortized time per operation using a bounded priority queue[2]logarithmic timeDLOGTIME, Binary searchpolylogarithmic timefractional power where , Searching in a kd-treelinear time, Finding the smallest or largest item in an unsorted array.Kadane's algorithm.Linear search"n log-star n" timeSeidel's polygon triangulation algorithm.linearithmic time, Fastest possible comparison sortFast Fourier transform.quasilinear timeMultipoint polynomial evaluationquadratic timeBubble sort, Insertion sort, Direct convolutioncubic timeNaive multiplication of two  matricesCalculating partial correlation.polynomial timeP, Karmarkar's algorithm for linear programmingAKS primality test[3][4]quasi-polynomial timeQP, Best-known -approximation algorithm for the directed Steiner tree problem.sub-exponential time(first definition)SUBEXP for all Contains BPP unless EXPTIME (see below) equals MA.[5]sub-exponential time(second definition)Best classical algorithm for integer factorizationformerly-best algorithm for graph isomorphismexponential time(with linear exponent)E, Solving the traveling salesman problem using dynamic programmingexponential timeEXPTIME, Solving matrix chain multiplication via brute-force searchfactorial timeSolving the traveling salesman problem via brute-force searchdouble exponential time2-EXPTIMEDeciding the truth of a given statement in Presburger arithmeticAn algorithm is said to be constant time (also written as  time) if the value of  (the complexity of the algorithm)  is bounded by a value that does not depend on the size of the input. For example, accessing any single element in an array takes constant time as only one operation has to be performed to locate it. In a similar manner, finding the minimal value in an array sorted in ascending order; it is the first element. However, finding the minimal value in an unordered array is not a constant time operation as scanning over each element in the array is needed in order to determine the minimal value. Hence it is a linear time operation, taking  time. If the number of elements is known in advance and does not change, however, such an algorithm can still be said to run in constant time.Despite the name "constant time", the running time does not have to be independent of the problem size, but an upper bound for the running time has to be independent of the problem size. For example, the task "exchange the values of  and  if necessary so that " is called constant time even though the time may depend on whether or not it is already true that . However, there is some constant  such that the time required is always at most .Here are some examples of code fragments that run in constant time:int index = 5;int item = list[index];if (condition true) then    perform some operation that runs in constant timeelse    perform some other operation that runs in constant timefor i = 1 to 100    for j = 1 to 200        perform some operation that runs in constant timeIf  is , where  is any constant value, this is equivalent to and stated in standard notation as  being .An algorithm is said to take logarithmic time when .  Since  and  are related by a constant multiplier, and such a multiplier is irrelevant to big O classification, the standard usage for logarithmic-time algorithms is  regardless of the base of the logarithm appearing in the expression of .Algorithms taking logarithmic time are commonly found in operations on binary trees or when using binary search.An  algorithm is considered highly efficient, as the ratio of the number of operations to the size of the input decreases and tends to zero when  increases. An algorithm that must access all elements of its input cannot take logarithmic time, as the time taken for reading an input of size  is of the order of .An example of logarithmic time is given by dictionary search. Consider a dictionary  which contains  entries, sorted by alphabetical order. We suppose that, for , one may access the th entry of the dictionary in a constant time. Let  denote this th entry. Under these hypotheses, the test to see if a word  is in the dictionary may be done in logarithmic time: consider , where  denotes the floor function. If , then we are done. Else, if , continue the search in the same way in the left half of the dictionary, otherwise continue similarly with the right half of the dictionary. This algorithm is similar to the method often used to find an entry in a paper dictionary.An algorithm is said to run in polylogarithmic time if its time  is  for some constant . Another way to write this is .For example, matrix chain ordering can be solved in polylogarithmic time on a parallel random-access machine,[6] and a graph can be determined to be planar in a fully dynamic way in  time per insert/delete operation.[7]An algorithm is said to run in sub-linear time (often spelled sublinear time) if . In particular this includes algorithms with the time complexities defined above.Typical algorithms that are exact and yet run in sub-linear time use parallel processing (as the NC1 matrix determinant calculation does), or alternatively have guaranteed assumptions on the input structure (as the logarithmic time binary search and many tree maintenance algorithms do). However, formal languages such as the set of all strings that have a 1-bit in the position indicated by the first  bits of the string may depend on every bit of the input and yet be computable in sub-linear time.The specific term sublinear time algorithm is usually reserved to algorithms that are unlike the above in that they are run over classical serial machine models and are not allowed prior assumptions on the input.[8] They are however allowed to be randomized, and indeed must be randomized for all but the most trivial of tasks.As such an algorithm must provide an answer without reading the entire input, its particulars heavily depend on the access allowed to the input. Usually for an input that is represented as a binary string  it is assumed that the algorithm can in time  request and obtain the value of  for any .Sub-linear time algorithms are typically randomized, and provide only approximate solutions. In fact, the property of a binary string having only zeros (and no ones) can be easily proved not to be decidable by a (non-approximate) sub-linear time algorithm. Sub-linear time algorithms arise naturally in the investigation of property testing.An algorithm is said to take linear time, or  time, if its time complexity is . Informally, this means that the running time increases at most linearly with the size of the input. More precisely, this means that there is a constant  such that the running time is at most  for every input of size . For example, a procedure that adds up all elements of a list requires time proportional to the length of the list, if the adding time is constant, or, at least, bounded by a constant.Linear time is the best possible time complexity in situations where the algorithm has to sequentially read its entire input. Therefore, much research has been invested into discovering algorithms exhibiting linear time or, at least, nearly linear time. This research includes both software and hardware methods. There are several hardware technologies which exploit parallelism to provide this. An example is content-addressable memory. This concept of linear time is used in string matching algorithms such as the Boyer–Moore algorithm and Ukkonen's algorithm. Quasilinear timeAn algorithm is said to run in quasilinear time (also referred to as log-linear time) if  for some positive constant ;[9] linearithmic time is the case .[10] Using soft O notation these algorithms are . Quasilinear time algorithms are also  for every constant  and thus run faster than any polynomial time algorithm whose time bound includes a term  for any .Algorithms which run in quasilinear time include:In-place merge sort, Quicksort, , in its randomized version, has a running time that is  in expectation on the worst-case input. Its non-randomized version has an  running time only when considering average case complexity.Heapsort, , merge sort, introsort, binary tree sort, smoothsort, patience sorting, etc. in the worst caseFast Fourier transforms, Monge array calculation, In many cases, the  running time is simply the result of performing a  operation  times (for the notation, see Big O notation § Family of Bachmann–Landau notations). For example, binary tree sort creates a binary tree by inserting each element of the -sized array one by one. Since the insert operation on a self-balancing binary search tree takes  time, the entire algorithm takes  time.Comparison sorts require at least  comparisons in the worst case because , by Stirling's approximation. They also frequently arise from the recurrence relation .An algorithm is said to be subquadratic time if .For example, simple, comparison-based sorting algorithms are quadratic (e.g. insertion sort), but more advanced algorithms can be found that are subquadratic (e.g. shell sort). No general-purpose sorts run in linear time, but the change from quadratic to sub-quadratic is of great practical importance.An algorithm is said to be of polynomial time if its running time is upper bounded by a polynomial expression in the size of the input for the algorithm, that is,  for some positive constant k.[1][11] Problems for which a deterministic polynomial-time algorithm exists belong to the complexity class P, which is central in the field of computational complexity theory. Cobham's thesis states that polynomial time is a synonym for "tractable", "feasible", "efficient", or "fast".[12]Some examples of polynomial-time algorithms:The selection sort sorting algorithm on n integers performs  operations for some constant A. Thus it runs in time  and is a polynomial-time algorithm.All the basic arithmetic operations (addition, subtraction, multiplication, division, and comparison) can be done in polynomial time.Maximum matchings in graphs can be found in polynomial time.In some contexts, especially in optimization, one differentiates between strongly polynomial time and weakly polynomial time algorithms. These two concepts are only relevant if the inputs to the algorithms consist of integers.Strongly polynomial time is defined in the arithmetic model of computation. In this model of computation the basic arithmetic operations (addition, subtraction, multiplication, division, and comparison) take a unit time step to perform, regardless of the sizes of the operands. The algorithm runs in strongly polynomial time if:[13]the number of operations in the arithmetic model of computation is bounded by a polynomial in the number of integers in the input instance; andthe space used by the algorithm is bounded by a polynomial in the size of the input.Any algorithm with these two properties can be converted to a polynomial time algorithm by replacing the arithmetic operations by suitable algorithms for performing the arithmetic operations on a Turing machine. The second condition is strictly necessary: given the integer  (which takes up space proportional to n in the Turing machine model), it is possible to compute  with n multiplications using repeated squaring. However, the space used to represent  is proportional to , and thus exponential rather than polynomial in the space used to represent the input. Hence, it is not possible to carry out this computation in polynomial time on a Turing machine, but it is possible to compute it by polynomially many arithmetic operations.However, for the first condition, there are algorithms that run in a number of Turing machine steps bounded by a polynomial in the length of binary-encoded input, but do not take a number of arithmetic operations bounded by a polynomial in the number of input numbers. The Euclidean algorithm for computing the greatest common divisor of two integers is one example. Given two integers  and , the algorithm performs  arithmetic operations on numbers with at most  bits. At the same time, the number of arithmetic operations cannot be bounded by the number of integers in the input (which is constant in this case, there are always only two integers in the input). Due to the latter observation, the algorithm does not run in strongly polynomial time. Its real running time depends logarithmically on the magnitudes of  and  (that is, on their length in bits) and not only on the number of integers in the input.An algorithm that runs in polynomial time but that is not strongly polynomial is said to run in weakly polynomial time.[14]A well-known example of a problem for which a weakly polynomial-time algorithm is known, but is not known to admit a strongly polynomial-time algorithm, is linear programming. Weakly polynomial time should not be confused with pseudo-polynomial time, which depends linearly on the magnitude of values in the problem and is not truly polynomial time.The concept of polynomial time leads to several complexity classes in computational complexity theory. Some important classes defined using polynomial time are the following.P: The complexity class of decision problems that can be solved on a deterministic Turing machine in polynomial timeNP: The complexity class of decision problems that can be solved on a non-deterministic Turing machine in polynomial timeZPP: The complexity class of decision problems that can be solved with zero error on a probabilistic Turing machine in polynomial timeRP: The complexity class of decision problems that can be solved with 1-sided error on a probabilistic Turing machine in polynomial time.BPP: The complexity class of decision problems that can be solved with 2-sided error on a probabilistic Turing machine in polynomial timeBQP: The complexity class of decision problems that can be solved with 2-sided error on a quantum Turing machine in polynomial timeP is the smallest time-complexity class on a deterministic machine which is robust in terms of machine model changes. (For example, a change from a single-tape Turing machine to a multi-tape machine can lead to a quadratic speedup, but any algorithm that runs in polynomial time under one model also does so on the other.) Any given abstract machine will have a complexity class corresponding to the problems which can be solved in polynomial time on that machine.An algorithm is defined to take superpolynomial time if T(n) is not bounded above by any polynomial. Using little omega notation, it is ω(nc) time for all constants c, where n is the input parameter, typically the number of bits in the input.For example, an algorithm that runs for 2n steps on an input of size n requires superpolynomial time (more specifically, exponential time).An algorithm that uses exponential resources is clearly superpolynomial, but some algorithms are only very weakly superpolynomial. For example, the Adleman–Pomerance–Rumely primality test runs for  time on n-bit inputs; this grows faster than any polynomial for large enough n, but the input size must become impractically large before it cannot be dominated by a polynomial with small degree.An algorithm that requires superpolynomial time lies outside the complexity class P. Cobham's thesis posits that these algorithms are impractical, and in many cases they are. Since the P versus NP problem is unresolved, it is unknown whether NP-complete problems require superpolynomial time.Quasi-polynomial time algorithms are algorithms that run longer than polynomial time, yet not so long as to be exponential time. The worst case running time of a quasi-polynomial time algorithm is  for some fixed . For  we get a polynomial time algorithm, for  we get a sub-linear time algorithm.Quasi-polynomial time algorithms typically arise in reductions from an NP-hard problem to another problem. For example, one can take an instance of an NP hard problem, say 3SAT, and convert it to an instance of another problem B, but the size of the instance becomes . In that case, this reduction does not prove that problem B is NP-hard; this reduction only shows that there is no polynomial time algorithm for B unless there is a quasi-polynomial time algorithm for 3SAT (and thus all of NP). Similarly, there are some problems for which we know quasi-polynomial time algorithms, but no polynomial time algorithm is known. Such problems arise in approximation algorithms; a famous example is the directed Steiner tree problem, for which there is a quasi-polynomial time approximation algorithm achieving an approximation factor of  (n being the number of vertices), but showing the existence of such a polynomial time algorithm is an open problem.Other computational problems with quasi-polynomial time solutions but no known polynomial time solution include the planted clique problem in which the goal is to find a large clique in the union of a clique and a random graph. Although quasi-polynomially solvable, it has been conjectured that the planted clique problem has no polynomial time solution; this planted clique conjecture has been used as a computational hardness assumption to prove the difficulty of several other problems in computational game theory, property testing, and machine learning.[15]The complexity class QP consists of all problems that have quasi-polynomial time algorithms. It can be defined in terms of DTIME as follows.[16]In complexity theory, the unsolved P versus NP problem asks if all problems in NP have polynomial-time algorithms. All the best-known algorithms for NP-complete problems like 3SAT etc. take exponential time. Indeed, it is conjectured for many natural NP-complete problems that they do not have sub-exponential time algorithms. Here "sub-exponential time" is taken to mean the second definition presented below. (On the other hand, many graph problems represented in the natural way by adjacency matrices are solvable in subexponential time simply because the size of the input is the square of the number of vertices.) This conjecture (for the k-SAT problem) is known as the exponential time hypothesis.[17] Since it is conjectured that NP-complete problems do not have quasi-polynomial time algorithms, some inapproximability results in the field of approximation algorithms make the assumption that NP-complete problems do not have quasi-polynomial time algorithms. For example, see the known inapproximability results for the set cover problem.Sub-exponential timeThe term sub-exponential time is used to express that the running time of some algorithm may grow faster than any polynomial but is still significantly smaller than an exponential. In this sense, problems that have sub-exponential time algorithms are somewhat more tractable than those that only have exponential algorithms. The precise definition of "sub-exponential" is not generally agreed upon,[18] and we list the two most widely used ones below.A problem is said to be sub-exponential time solvable if it can be solved in running times whose logarithms grow smaller than any given polynomial. More precisely, a problem is in sub-exponential time if for every  there exists an algorithm which solves the problem in time O(2nε). The set of all such problems is the complexity class SUBEXP which can be defined in terms of DTIME as follows.[5][19][20][21]This notion of sub-exponential is non-uniform in terms of ε in the sense that ε is not part of the input and each ε may have its own algorithm for the problem.Some authors define sub-exponential time as running times in .[17][22][23] This definition allows larger running times than the first definition of sub-exponential time. An example of such a sub-exponential time algorithm is the best-known classical algorithm for integer factorization, the general number field sieve, which runs in time about , where the length of the input is . Another example was the graph isomorphism problem, which the best known algorithm from 1982 to 2016 solved in . However, at STOC 2016 a quasi-polynomial time algorithm was presented.[24]It makes a difference whether the algorithm is allowed to be sub-exponential in the size of the instance, the number of vertices, or the number of edges. In parameterized complexity, this difference is made explicit by considering pairs  of decision problems and parameters k. SUBEPT is the class of all parameterized problems that run in time sub-exponential in k and polynomial in the input size n:[25]More precisely, SUBEPT is the class of all parameterized problems  for which there is a computable function  with  and an algorithm that decides L in time .The exponential time hypothesis (ETH) is that 3SAT, the satisfiability problem of Boolean formulas in conjunctive normal form with at most three literals per clause and with n variables, cannot be solved in time 2o(n). More precisely, the hypothesis is that there is some absolute constant  such that 3SAT cannot be decided in time 2cn by any deterministic Turing machine. With m denoting the number of clauses, ETH is equivalent to the hypothesis that kSAT cannot be solved in time 2o(m) for any integer .[26] The exponential time hypothesis implies P ≠ NP.An algorithm is said to be exponential time, if T(n) is upper bounded by 2poly(n), where poly(n) is some polynomial in n. More formally, an algorithm is exponential time if T(n) is bounded by O(2nk) for some constant k. Problems which admit exponential time algorithms on a deterministic Turing machine form the complexity class known as EXP.Sometimes, exponential time is used to refer to algorithms that have T(n) = 2O(n), where the exponent is at most a linear function of n. This gives rise to the complexity class E.An algorithm is said to be factorial time if T(n) is upper bounded by the factorial function n!. Factorial time is a subset of exponential time (EXP) because  for all . However, it is not a subset of E.An example of an algorithm that runs in factorial time is bogosort, a notoriously inefficient sorting algorithm based on trial and error.  Bogosort sorts a list of n items by repeatedly shuffling the list until it is found to be sorted. In the average case, each pass through the bogosort algorithm will examine one of the n! orderings of the n items.  If the items are distinct, only one such ordering is sorted. Bogosort shares patrimony with the infinite monkey theorem.An algorithm is said to be double exponential time if T(n) is upper bounded by 22poly(n), where poly(n) is some polynomial in n. Such algorithms belong to the complexity class 2-EXPTIME.Well-known double exponential time algorithms include:Decision procedures for Presburger arithmeticComputing a Gröbner basis (in the worst case[27])Quantifier elimination on real closed fields takes at least double exponential time,[28] and can be done in this time.[29]L-notationSpace complexity