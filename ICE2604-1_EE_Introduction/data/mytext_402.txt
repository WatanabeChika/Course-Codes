Ford-Fulkerson_methodThe Ford–Fulkerson method or Ford–Fulkerson algorithm (FFA) is a greedy algorithm that computes the maximum flow in a flow network. It is sometimes called a "method" instead of an "algorithm" as the approach to finding augmenting paths in a residual graph is not fully specified[1] or it is specified in several implementations with different running times.[2] It was published in 1956 by L. R. Ford Jr. and D. R. Fulkerson.[3] The name "Ford–Fulkerson" is often also used for the Edmonds–Karp algorithm, which is a fully defined implementation of the Ford–Fulkerson method.The idea behind the algorithm is as follows: as long as there is a path from the source (start node) to the sink (end node), with available capacity on all edges in the path, we send flow along one of the paths. Then we find another path, and so on. A path with available capacity is called an augmenting path.Let  be a graph, and for each edge from  to , let  be the capacity and  be the flow. We want to find the maximum flow from the source  to the sink . After every step in the algorithm the following is maintained:Capacity constraintsThe flow along an edge cannot exceed its capacity.Skew symmetryThe net flow from  to  must be the opposite of the net flow from  to  (see example).Flow conservationThe net flow to a node is zero, except for the source, which "produces" flow, and the sink, which "consumes" flow.Value(f)The flow leaving from  must be equal to the flow arriving at .This means that the flow through the network is a legal flow after each round in the algorithm. We define the residual network  to be the network with capacity  and no flow. Notice that it can happen that a flow from  to  is allowed in the residualnetwork, though disallowed in the original network: if  and  then .The path in step 2 can be found with, for example, a breadth-first search (BFS) or a depth-first search in . If you use the former, the algorithm is called Edmonds–Karp.When no more paths in step 2 can be found,  will not be able to reach  in the residualnetwork. If  is the set of nodes reachable by  in the residual network, then the totalcapacity in the original network of edges from  to the remainder of  is on the one handequal to the total flow we found from  to ,and on the other hand serves as an upper bound for all such flows.This proves that the flow we found is maximal. See also Max-flow Min-cut theorem.If the graph  has multiple sources and sinks, we act as follows:Suppose that  and . Add a new source  with an edge  from  to every node , with capacity . And add a new sink  with an edge  from every node  to , with capacity . Then apply the Ford–Fulkerson algorithm.Also, if a node  has capacity constraint , we replace this node with two nodes , and an edge , with capacity . Then apply the Ford–Fulkerson algorithm.By adding the flow augmenting path to the flow already established in the graph, the maximum flow will be reached when no more flow augmenting paths can be found in the graph.  However, there is no certainty that this situation will ever be reached, so the best that can be guaranteed is that the answer will be correct if the algorithm terminates.  In the case that the algorithm runs forever, the flow might not even converge towards the maximum flow.  However, this situation only occurs with irrational flow values.[4]  When the capacities are integers, the runtime of Ford–Fulkerson is bounded by  (see big O notation), where  is the number of edges in the graph and  is the maximum flow in the graph.  This is because each augmenting path can be found in  time and increases the flow by an integer amount of at least , with the upper bound .A variation of the Ford–Fulkerson algorithm with guaranteed termination and a runtime independent of the maximum flow value is the Edmonds–Karp algorithm, which runs in  time.The following example shows the first steps of Ford–Fulkerson in a flow network with 4 nodes, source  and sink . This example shows the worst-case behaviour of the algorithm. In each step, only a flow of  is sent across the network. If breadth-first-search were used instead, only two steps would be needed.PathCapacityResulting flow networkInitial flow networkAfter 1998 more steps ...Final flow networkNotice how flow is "pushed back" from  to  when finding the path .Consider the flow network shown on the right, with source , sink , capacities of edges ,  and  respectively ,  and  and the capacity of all other edges some integer . The constant  was chosen so, that . We use augmenting paths according to the following table, where ,  and .StepAugmenting pathSent flowResidual capacities012345Note that after step 1 as well as after step 5, the residual capacities of edges ,  and  are in the form ,  and , respectively, for some . This means that we can use augmenting paths , ,  and  infinitely many times and residual capacities of these edges will always be in the same form. Total flow in the network after step 5 is . If we continue to use augmenting paths as above, the total flow converges to .  However, note that there is a flow of value , by sending  units of flow along , 1 unit of flow along , and  units of flow along . Therefore, the algorithm never terminates and the flow does not even converge to the maximum flow.[5]Another non-terminating example based on the Euclidean algorithm is given by Backman &amp; Huynh (2018), where they also show that the worst case running-time of the Ford-Fulkerson algorithm on a network  in ordinal numbers is .Berge's theoremApproximate max-flow min-cut theoremTurn restriction routingDinic's algorithmCormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2001). "Section 26.2: The Ford–Fulkerson method". Introduction to Algorithms (Second ed.). MIT Press and McGraw–Hill. pp. 651–664. ISBN 0-262-03293-7.George T. Heineman; Gary Pollice; Stanley Selkow (2008). "Chapter 8:Network Flow Algorithms". Algorithms in a Nutshell. Oreilly Media. pp. 226–250. ISBN 978-0-596-51624-6.Jon Kleinberg; Éva Tardos (2006). "Chapter 7:Extensions to the Maximum-Flow Problem". Algorithm Design. Pearson Education. pp. 378–384. ISBN 0-321-29535-8.Samuel Gutekunst (2009). ENGRI 1101. Cornell University.Backman, Spencer; Huynh, Tony (2018). "Transfinite Ford–Fulkerson on a finite network". Computability. 7 (4): 341–347. arXiv:. doi:10.3233/COM-180082. S2CID 15497138.A tutorial explaining the Ford–Fulkerson method to solve the max-flow problemAnother Java animationJava Web Start application Media related to Ford-Fulkerson's algorithm at Wikimedia Commons