Floyd-Warshall_algorithmFloyd–Warshall algorithmClassAll-pairs shortest path problem (for weighted graphs)Data structureGraphWorst-case performanceBest-case performanceAverage performanceWorst-case space complexityGraph and treesearch algorithmsα–β pruningBacktrackingBeam searchBest-first searchBranch &amp; boundBreadth-First Search (BFS)British MuseumDepth-First Search (DFS)Hill climbingIterative Deepening DFS (IDDFS)Lexicographic BFSShortest pathA*B*Bellman–FordBidirectional searchD*Dijkstra'sFloyd–WarshallFringe searchIterative Deepening (IDA*)Johnson'sJump point searchKruskal'sLifelong Planning A* (LPA*)PathfindingSMA*ListsGraph algorithmsSearch algorithmsList of graph algorithmsRelated topicsDynamic programmingGraph coloringGraph traversalMinimum spanning treeSearch gamesThreaded binary treeTree traversalIn computer science, the Floyd–Warshall algorithm (also known as Floyd's algorithm, the Roy–Warshall algorithm, the Roy–Floyd algorithm, or the WFI algorithm) is an algorithm for finding shortest paths in a directed weighted graph with positive or negative edge weights (but with no negative cycles).[1][2] A single execution of the algorithm will find the lengths (summed weights) of shortest paths between all pairs of vertices. Although it does not return details of the paths themselves, it is possible to reconstruct the paths with simple modifications to the algorithm. Versions of the algorithm can also be used for finding the transitive closure of a relation , or (in connection with the Schulze voting system) widest paths between all pairs of vertices in a weighted graph.The Floyd–Warshall algorithm is an example of dynamic programming, and was published in its currently recognized form by Robert Floyd in 1962.[3]  However, it is essentially the same as algorithms previously published by Bernard Roy in 1959[4] and also by Stephen Warshall in 1962[5] for finding the transitive closure of a graph,[6] and is closely related to Kleene's algorithm (published in 1956) for converting a deterministic finite automaton into a regular expression.[7] The modern formulation of the algorithm as three nested for-loops was first described by Peter Ingerman, also in 1962.[8]The Floyd–Warshall algorithm compares all possible paths through the graph between each pair of vertices. It is able to do this with  comparisons in a graph, even though there may be up to  edges in the graph, and every combination of edges is tested.  It does so by incrementally improving an estimate on the shortest path between two vertices, until the estimate is optimal.Consider a graph  with vertices  numbered 1 through . Further consider a function  that returns the shortest possible path (if one exists) from  to  using vertices only from the set  as intermediate points along the way.  Now, given this function, our goal is to find the shortest path from each  to each  using any vertex in .For each of these pairs of vertices, the  could be either(1) a path that does not go through  (only uses vertices in the set .)or(2) a path that does go through  (from  to  and then from  to , both only using intermediate vertices in )We know that the best path from  to  that only uses vertices  through  is defined by , and it is clear that if there was a better path from  to  to , then the length of this path would be the concatenation of the shortest path from  to  (only using intermediate vertices in ) and the shortest path from  to  (only using intermediate vertices in ).If  is the weight of the edge between vertices  and , we can define  in terms of the following recursive formula: the base case isand the recursive case is.This formula is the heart of the Floyd–Warshall algorithm. The algorithm works by first computing  for all  pairs for , then , and so on.  This process continues until , and we have found the shortest path for all  pairs using any intermediate vertices. Pseudocode for this basic version follows:let dist be a |V| × |V| array of minimum distances initialized to ∞ (infinity)for each edge (u, v) do    dist[u][v] ← w(u, v)  // The weight of the edge (u, v)for each vertex v do    dist[v][v] ← 0for k from 1 to |V|    for i from 1 to |V|        for j from 1 to |V|            if dist[i][j] &gt; dist[i][k] + dist[k][j]                 dist[i][j] ← dist[i][k] + dist[k][j]            end ifThe algorithm above is executed on the graph on the left below:Prior to the first recursion of the outer loop, labeled  above, the only known paths correspond to the single edges in the graph. At , paths that go through the vertex 1 are found: in particular, the path [2,1,3] is found, replacing the path [2,3] which has fewer edges but is longer (in terms of weight). At , paths going through the vertices {1,2} are found. The red and blue boxes show how the path [4,2,1,3] is assembled from the two known paths [4,2] and [2,1,3] encountered in previous iterations, with 2 in the intersection. The path [4,2,3] is not considered, because [2,1,3] is the shortest path encountered so far from 2 to 3. At , paths going through the vertices {1,2,3} are found. Finally, at , all shortest paths are found.The distance matrix at each iteration of , with the updated distances in bold, will be:123410∞−2∞2403∞3∞∞024∞−1∞0123410∞−2∞2402∞3∞∞024∞−1∞0123410∞−2∞2402∞3∞∞0243−110123410∞−20240243∞∞0243−110123410−1−20240243510243−110A negative cycle is a cycle whose edges sum to a negative value.  There is no shortest path between any pair of vertices ,  which form part of a negative cycle,  because path-lengths from  to  can be arbitrarily small (negative).  For numerically meaningful output, the Floyd–Warshall algorithm assumes that there are no negative cycles.  Nevertheless, if there are negative cycles, the Floyd–Warshall algorithm can be used to detect them.  The intuition is as follows:The Floyd–Warshall algorithm iteratively revises path lengths between all pairs of vertices , including where ;Initially, the length of the path  is zero;A path  can only improve upon this if it has length less than zero, i.e. denotes a negative cycle;Thus, after the algorithm,  will be negative if there exists a negative-length path from  back to .Hence, to detect negative cycles using the Floyd–Warshall algorithm, one can inspect the diagonal of the path matrix, and the presence of a negative number indicates that the graph contains at least one negative cycle.[9] During the execution of the algorithm, if there is a negative cycle, exponentially large numbers can appear, as large as , where  is the largest absolute value of a negative edge in the graph. To avoid overflow/underflow problems one should check for negative numbers on the diagonal of the path matrix within the inner for loop of the algorithm.[10] Obviously, in an undirected graph a negative edge creates a negative cycle  (i.e., a closed walk) involving its incident vertices. Considering all edges of the above example graph as undirected, e.g. the vertex sequence 4 – 2 – 4 is a cycle with weight sum −2.The Floyd–Warshall algorithm typically only provides the lengths of the paths between all pairs of vertices. With simple modifications, it is possible to create a method to reconstruct the actual path between any two endpoint vertices. While one may be inclined to store the actual path from each vertex to each other vertex, this is not necessary, and in fact, is very costly in terms of memory. Instead, the shortest-path tree can be calculated for each node in  time using  memory to store each tree which allows us to efficiently reconstruct a path from any two connected vertices.let dist be a  array of minimum distances initialized to  (infinity)let next be a  array of vertex indices initialized to nullprocedure FloydWarshallWithPathReconstruction() is    for each edge (u, v) do        dist[u][v] ← w(u, v)  // The weight of the edge (u, v)        next[u][v] ← v    for each vertex v do        dist[v][v] ← 0        next[v][v] ← v    for k from 1 to |V| do // standard Floyd-Warshall implementation        for i from 1 to |V|            for j from 1 to |V|                if dist[i][j] &gt; dist[i][k] + dist[k][j] then                    dist[i][j] ← dist[i][k] + dist[k][j]                    next[i][j] ← next[i][k]procedure Path(u, v)    if next[u][v] = null then        return []    path ← [u]    while u ≠ v        u ← next[u][v]        path.append(u)    return pathLet  be , the number of vertices. To find all  of  (for all  and ) from those of requires  operations. Since we begin with and compute the sequence of  matrices , , , , the total number of operations used is . Therefore, the complexity of the algorithm is .The Floyd–Warshall algorithm can be used to solve the following problems, among others:Shortest paths in directed graphs (Floyd's algorithm).Transitive closure of directed graphs (Warshall's algorithm). In Warshall's original formulation of the algorithm, the graph is unweighted and represented by a Boolean adjacency matrix. Then the addition operation is replaced by logical conjunction (AND) and the minimum operation by logical disjunction (OR).Finding a regular expression denoting the regular language accepted by a finite automaton (Kleene's algorithm, a closely related generalization of the Floyd–Warshall algorithm)[12]Inversion of real matrices (Gauss–Jordan algorithm) [13]Optimal routing. In this application one is interested in finding the path with the maximum flow between two vertices. This means that, rather than taking minima as in the pseudocode above, one instead takes maxima. The edge weights represent fixed constraints on flow. Path weights represent bottlenecks; so the addition operation above is replaced by the minimum operation.Fast computation of Pathfinder networks.Widest paths/Maximum bandwidth pathsComputing canonical form of difference bound matrices (DBMs)Computing the similarity between graphsTransitive closure in AND/OR/threshold graphs.[14]Implementations are available for many programming languages.For C++, in the boost::graph libraryFor C#, at QuickGraphFor C#, at QuickGraphPCL (A fork of QuickGraph with better compatibility with projects using Portable Class Libraries.)For Java, in the Apache Commons Graph libraryFor JavaScript, in the Cytoscape libraryFor Julia, in the Graphs.jl packageFor MATLAB, in the Matlab_bgl packageFor Perl, in the Graph moduleFor Python, in the SciPy library (module scipy.sparse.csgraph) or NetworkX libraryFor R, in packages e1071 and RfastThe Floyd–Warshall algorithm is a good choice for computing paths between all pairs of vertices in dense graphs, in which most or all pairs of vertices are connected by edges. For sparse graphs with non-negative edge weights, lower asymptotic complexity can be obtained by running Dijkstra's algorithm from each possible starting vertex, since the worst-case running time of repeated Dijkstra ( using Fibonacci heaps) is smaller than the  running time of the Floyd–Warshall algorithm when  is significantly smaller than . For sparse graphs with negative edges but no negative cycles, Johnson's algorithm can be used, with the same asymptotic running time as the repeated Dijkstra approach.There are also known algorithms using fast matrix multiplication to speed up all-pairs shortest path computation in dense graphs, but these typically make extra assumptions on the edge weights (such as requiring them to be small integers).[15][16] In addition, because of the high constant factors in their running time, they would only provide a speedup over the Floyd–Warshall algorithm for very large graphs.Interactive animation of the Floyd–Warshall algorithmInteractive animation of the Floyd–Warshall algorithm (Technical University of Munich)