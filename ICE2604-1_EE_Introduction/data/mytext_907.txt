shortest_common_supersequenceIn computer science, the shortest common supersequence of two sequences X and Y is the shortest sequence which has X and Y as subsequences. This is a problem closely related to the longest common subsequence problem. Given two sequences X = &lt; x1,...,xm &gt; and Y = &lt; y1,...,yn &gt;, a sequence U = &lt; u1,...,uk &gt; is a common supersequence of X and Y if items can be removed from U to produce X and Y.A shortest common supersequence (SCS) is a common supersequence of minimal length.  In the shortest common supersequence problem, two sequences X and Y are given, and the task is to find a shortest possible common supersequence of these sequences.  In general, an SCS is not unique.For two input sequences, an SCS can be formed from a longest common subsequence (LCS) easily.  For example, the longest common subsequence of X and Y is Z.  By inserting the non-LCS symbols into Z while preserving their original order, we obtain a shortest common supersequence U.  In particular, the equation  holds for any two input sequences.There is no similar relationship between shortest common supersequences and longest common subsequences of three or more input sequences.  (In particular, LCS and SCS are not dual problems.)  However, both problems can be solved in  time using dynamic programming, where  is the number of sequences, and  is their maximum length.  For the general case of an arbitrary number of input sequences, the problem is NP-hard.[1]The closely related problem of finding a minimum-length string which is a superstring of a finite set of strings S = { s1,s2,...,sn } is also NP-hard.[2]  Several constant factor approximations have been proposed throughout the years, and the current best known algorithm has an approximation factor of 2.475.[3] However, perhaps the simplest solution is to reformulate the problem as an instance of weighted set cover in such a way that the weight of the optimal solution to the set cover instance is less than twice the length of the shortest superstring S. One can then use the O(log(n))-approximation for weighted set-cover to obtain an O(log(n))-approximation for the shortest superstring (note that this is not a constant factor approximation).For any string x in this alphabet, define P(x) to be the set of all strings which are substrings of x. The instance I of set cover is formulated as follows: Let M be empty.For each pair of strings si and sj, if the last k symbols of si are the same as the first k symbols of sj, then add a string to M that consists of the concatenation with maximal overlap of si with sj.Define the universe  of the set cover instance to be SDefine the set of subsets of the universe to be { P(x) | x ∈ S ∪ M }Define the cost of each subset P(x) to be |x|, the length of x.The instance I can then be solved using an algorithm for weighted set cover, and the algorithm can output an arbitrary concatenation of the strings x for which the weighted set cover algorithm outputs P(x).[4]Consider the set S = { abc, cde, fab }, which becomes the universe of the weighted set cover instance. In this case, M = { abcde, fabc }. Then the set of subsets of the universe iswhich have costs 3, 3, 3, 5, and 4, respectively.Garey, Michael R.; Johnson, David S. (1979). Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. Freeman. p. 228 A4.2: SR8. ISBN 0-7167-1045-5. Zbl 0411.68039.Szpankowski, Wojciech (2001). Average case analysis of algorithms on sequences. Wiley-Interscience Series in Discrete Mathematics and Optimization. With a foreword by Philippe Flajolet. Chichester: Wiley. ISBN 0-471-24063-X. Zbl 0968.68205.Vazirani, Vijay V. (2001), Approximation Algorithms, Springer-Verlag, ISBN 3-540-65367-8Dictionary of Algorithms and Data Structures: shortest common supersequence