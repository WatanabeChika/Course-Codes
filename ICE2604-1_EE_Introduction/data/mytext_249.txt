cuckoo_hashingCuckoo hashing is a scheme in computer programming for resolving hash collisions of values of hash functions in a table, with worst-case constant lookup time. The name derives from the behavior of some species of cuckoo, where the cuckoo chick pushes the other eggs or young out of the nest when it hatches in a variation of the behavior referred to as brood parasitism; analogously, inserting a new key into a cuckoo hashing table may push an older key to a different location in the table.Cuckoo hashing was first described by Rasmus Pagh and Flemming Friche Rodler in a 2001 conference paper.[1] The paper was awarded the European Symposium on Algorithms Test-of-Time award in 2020.[2]Cuckoo hashing is a form of open addressing in which each non-empty cell of a hash table contains a key or key–value pair. A hash function is used to determine the location for each key, and its presence in the table (or the value associated with it) can be found by examining that cell of the table. However, open addressing suffers from collisions, which happens when more than one key is mapped to the same cell.The basic idea of cuckoo hashing is to resolve collisions by using two hash functions instead of only one. This provides two possible locations in the hash table for each key. In one of the commonly used variants of the algorithm, the hash table is split into two smaller tables of equal size, and each hash function provides an index into one of these two tables. It is also possible for both hash functions to provide indexes into a single table.[1]Cuckoo hashing uses two hash tables,  and  and assuming  be the length of each tables, the hash functions for the two tables is defined as,  and  where  be the key and  be the set whose keys are stored in  of  or  of . The lookup operation is as follows:[1] function lookup(x) is   return  end functionThe logical or () denotes that, the value of the key  is found in either  or , which is  in worst case.[1]Deletion is performed in  since there isn't involvement of probing—not considering the cost of shrinking operation if table is too sparse.[1]Insertion of a new item, the first step involves examining if the slot  of the table  is occupied; if it is not, the item is inserted at that cell. However, if the slot is occupied, the preoccupied item gets removed—let it be —and  is inserted at . The removed item  is inserted into the table  by following the same procedure; the process continues until an empty position is found to insert the key.[1] To avoid the possible infinite iteration in the process loop, a  is specified such that if the iterations exceeds the fixed threshold, the hash tables—both  and —are rehashed with newer hash functions and the insertion procedure repeats. Following is a pseudocode for insertion:[1]1    function insert(x) is2      if lookup(x) then3        return4      end if5      loop Max-Loop times6        if  =  then7           := x8          return9        end if10       x 11       if  =  then12          := x13         return14       end if15       x 16     end loop17     rehash()18     insert(x)19   end functionOn lines 10 and 15, the "cuckoo approach" of kicking other keys—which was preoccupied at —takes place until every key has its own "nest" i.e. the item  is inserted into a spot on either one of the two tables; the notation  expresses the process of swapping.[1]Insertions succeed in expected constant time,[1] even considering the possibility of having to rebuild the table, as long as the number of keys is kept below half of the capacity of the hash table, i.e., the load factor is below 50%.One method of proving this uses the theory of random graphs: one may form an undirected graph called the "cuckoo graph" that has a vertex for each hash table location, and an edge for each hashed value, with the endpoints of the edge being the two possible locations of the value. Then, the greedy insertion algorithm for adding a set of values to a cuckoo hash table succeeds if and only if the cuckoo graph for this set of values is a pseudoforest, a graph with at most one cycle in each of its connected components. Any vertex-induced subgraph with more edges than vertices corresponds to a set of keys for which there are an insufficient number of slots in the hash table. When the hash function is chosen randomly, the cuckoo graph is a random graph in the Erdős–Rényi model. With high probability, for load factor less than 1/2 (corresponding to a random graph in which the ratio of the number of edges to the number of vertices is bounded below 1/2), the graph is a pseudoforest and the cuckoo hashing algorithm succeeds in placing all keys. The same theory also proves that the expected size of a connected component of the cuckoo graph is small, ensuring that each insertion takes constant expected time. However, also with high probability, a load factor greater than 1/2 will lead to a giant component with two or more cycles, causing the data structure to fail and need to be resized.[3]Since a theoretical random hash function requires too much space for practical usage, an important theoretical question is which practical hash functions suffice for Cuckoo hashing. One approach is to use k-independent hashing. In 2009 it was shown[4] that -independence suffices, and at least 6-independence is needed. Another approach is to use Tabulation hashing, which is not 6-independent, but was shown in 2012[5] to have other properties sufficient for Cuckoo hashing.A third approach from 2014[6] is to slightly modify the cuckoo hashtable with a so-called stash, which makes it possible to use nothing more than 2-independent hash functions.In practice, cuckoo hashing is about 20–30% slower than linear probing, which is the fastest of the common approaches.[1]The reason is that cuckoo hashing often causes two cache misses per search, to check the two locations where a key might be stored, while linear probing usually causes only one cache miss per search.However, because of its worst case guarantees on search time, cuckoo hashing can still be valuable when real-time response rates are required. One advantage of cuckoo hashing is its link-list free property, which fits GPU processing well.The following hash functions are given:The following two tables show the insertion of some example elements.  Each column corresponds to the state of the two hash tables over time.  The possible insertion locations for each new value are highlighted.If you now attempt to insert the element 6, then you get into a cycle, and fail. In the last row of the table we find the same initial situation as at the beginning again.table 1table 26 replaces 50 in cell 650 replaces 53 in cell 453 replaces 75 in cell 975 replaces 67 in cell 667 replaces 100 in cell 1100 replaces 105 in cell 9105 replaces 6 in cell 66 replaces 3 in cell 03 replaces 36 in cell 336 replaces 39 in cell 339 replaces 105 in cell 6105 replaces 100 in cell 9100 replaces 67 in cell 167 replaces 75 in cell 675 replaces 53 in cell 953 replaces 50 in cell 450 replaces 39 in cell 639 replaces 36 in cell 336 replaces 3 in cell 33 replaces 6 in cell 06 replaces 50 in cell 650 replaces 53 in cell 4Several variations of cuckoo hashing have been studied, primarily with the aim of improving its space usage by increasing the load factor that it can tolerate to a number greater than the 50% threshold of the basic algorithm. Some of these methods can also be used to reduce the failure rate of cuckoo hashing, causing rebuilds of the data structure to be much less frequent.Generalizations of cuckoo hashing that use more than two alternative hash functions can be expected to utilize a larger part of the capacity of the hash table efficiently while sacrificing some lookup and insertion speed. Using just three hash functions increases the load to 91%.[7]Another generalization of cuckoo hashing, called blocked cuckoo hashing consists in using more than one key per bucket. Using just 2 keys per bucket permits a load factor above 80%.[8]Another variation of cuckoo hashing that has been studied is cuckoo hashing with a stash. The stash, in this data structure, is an array of a constant number of keys, used to store keys that cannot successfully be inserted into the main hash table of the structure. This modification reduces the failure rate of cuckoo hashing to an inverse-polynomial function with an exponent that can be made arbitrarily large by increasing the stash size. However, larger stashes also mean slower searches for keys that are not present or are in the stash. A stash can be used in combination with more than two hash functions or with blocked cuckoo hashing to achieve both high load factors and small failure rates.[9] The analysis of cuckoo hashing with a stash extends to practical hash functions, not just to the random hash function model commonly used in theoretical analysis of hashing.[10]Some people recommend a simplified generalization of cuckoo hashing called skewed-associative cache in some CPU caches.[11]Another variation of a cuckoo hash table, called a cuckoo filter, replaces the stored keys of a cuckoo hash table with much shorter fingerprints, computed by applying another hash function to the keys. In order to allow these fingerprints to be moved around within the cuckoo filter, without knowing the keys that they came from, the two locations of each fingerprint may be computed from each other by a bitwise exclusive or operation with the fingerprint, or with a hash of the fingerprint. This data structure forms an approximate set membership data structure with much the same properties as a Bloom filter: it can store the members of a set of keys, and test whether a query key is a member, with some chance of false positives (queries that are incorrectly reported as being part of the set) but no false negatives. However, it improves on a Bloom filter in multiple respects: its memory usage is smaller by a constant factor, it has better locality of reference, and (unlike Bloom filters) it allows for fast deletion of set elements with no additional storage penalty.[12]A study by Zukowski et al.[13] has shown that cuckoo hashing is much faster than chained hashing for small, cache-resident hash tables on modern processors. Kenneth Ross[14] has shown bucketized versions of cuckoo hashing (variants that use buckets that contain more than one key) to be faster than conventional methods also for large hash tables, when space utilization is high. The performance of the bucketized cuckoo hash table was investigated further by Askitis,[15]with its performance compared against alternative hashing schemes.A survey by Mitzenmacher[7] presents open problems related to cuckoo hashing as of 2009.Perfect hashingDouble hashingQuadratic probingHopscotch hashingA cool and practical alternative to traditional hash tables, U. Erlingsson, M. Manasse, F. Mcsherry, 2006.Cuckoo Hashing for Undergraduates, 2006, R. Pagh, 2006.Cuckoo Hashing, Theory and Practice (Part 1, Part 2 and Part 3), Michael Mitzenmacher, 2007.Naor, Moni; Segev, Gil; Wieder, Udi (2008). "History-Independent Cuckoo Hashing". International Colloquium on Automata, Languages and Programming (ICALP). Reykjavik, Iceland.Algorithmic Improvements for Fast Concurrent Cuckoo Hashing, X. Li, D. Andersen, M. Kaminsky, M. Freedman. EuroSys 2014.Concurrent high-performance Cuckoo hashtable written in C++Cuckoo hash map written in C++Static cuckoo hashtable generator for C/C++Cuckoo hash table written in HaskellCuckoo hashing for Go