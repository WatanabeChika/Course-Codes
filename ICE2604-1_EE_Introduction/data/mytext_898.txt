set_packingSet packing is a classical NP-complete problem in computational complexity theory and combinatorics, and was one of Karp's 21 NP-complete problems.Suppose one has a finite set S and a list of subsets of S. Then, the set packing problem asks if some k subsets in the list are pairwise disjoint (in other words, no two of them share an element).More formally, given a universe  and a family  of subsets of ,a packing is a subfamily  of sets such that all sets in  are pairwise disjoint. The size of the packing is . In the set packing decision problem, the input is a pair  and an integer ; the question is whetherthere is a set packing of size  or more. In the set packing optimization problem, the input is a pair , and the task is to find a set packing that uses the most sets. The problem is clearly in NP since, given k subsets, we can easily verify that they are pairwise disjoint in polynomial time.The optimization version of the problem, maximum set packing, asks for the maximum number of pairwise disjoint sets in the list. It is a maximization problem that can be formulated naturally as an integer linear program, belonging to the class of packing problems.Covering/packing-problem pairs Covering problems Packing problems Minimum set cover Maximum set packing Minimum edge cover Maximum matching Minimum vertex cover Maximum independent set Bin covering Bin packing Polygon covering Rectangle packingThe maximum set packing problem can be formulated as the following integer linear program.maximize(maximize the total number of subsets)subject tofor all (selected sets have to be pairwise disjoint)for all .(every set is either in the set packing or not)The set packing problem is not only NP-complete, but its optimization version (general maximum set packing problem) has been proven as difficult to approximate as the maximum clique problem; in particular, it cannot be approximated within any constant factor.[1] The best known algorithm approximates it within a factor of .[2]The weighted variant can also be approximated as well.[3]However, the problem does have a variant which is more tractable: if we assume no subset exceeds k≥3 elements, the answer can be approximated within a factor of k/2 + ε for any ε &gt; 0; in particular, the problem with 3-element sets can be approximated within about 50%. In another more tractable variant, if no element occurs in more than k of the subsets, the answer can be approximated within a factor of k. This is also true for the weighted version.Hypergraph matching is equivalent to set packing: the sets correspond to the hyperedges.The independent set problem is also equivalent to set packing – there is a one-to-one polynomial-time reduction between them:Given a set packing problem on a collection , build a graph where for each set  there is a vertex , and there is an edge between  and  iff . Every independent set of vertices in the generated graph corresponds to a set packing in .Given an independent vertex set problem on a graph , build a collection of sets where for each vertex  there is a set  containing all edges adjacent to . Every set packing in the generated collection corresponds to an independent vertex set in .This is also a bidirectional PTAS reduction, and it shows that the two problems are equally difficult to approximate.Graph matching is a special case of set packing in which the size of all sets is 2 (the sets correspond to the edges). In this special case, a maximum-size matching can be found in polynomial time.3-dimensional matching is a special case in which the size of all sets is 3, and in addition, the elements are partitioned into 3 colors and each set contains exactly one element of each color. This special case is still NP-hard, though it has better constant-factor approximation algorithms than the general case.In the set cover problem, we are given a family  of subsets of a universe , and the goal is to determine whether we can choose k sets that together contain every element of .  These sets may overlap. The optimization version finds the minimum number of such sets. The maximum set packing need not cover every possible element. In the exact cover problem, every element of  should be contained in exactly one of the subsets. Finding such an exact cover is an NP-complete problem, even in the special case in which the size of all sets is 3 (this special case is called exact 3 cover or X3C). However, if we create a singleton set for each element of S and add these to the list, the resulting problem is about as easy as set packing.Karp originally showed set packing NP-complete via a reduction from the clique problem.See also: Packing in a hypergraph.Maximum Set Packing, Viggo Kann."set packing". Dictionary of Algorithms and Data Structures, editor Paul E. Black, National Institute of Standards and Technology. Note that the definition here is somewhat different.Steven S. Skiena. "Set Packing". The Algorithm Design Manual.Pierluigi Crescenzi, Viggo Kann, Magnús Halldórsson, Marek Karpinski and Gerhard Woeginger. "Maximum Set Packing". A compendium of NP optimization problems. Last modified March 20, 2000.Michael R. Garey and David S. Johnson (1979). Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. Freeman. ISBN 978-0-7167-1045-5. A3.1: SP3, pg.221.Vazirani, Vijay V. (2001). Approximation Algorithms. Springer-Verlag. ISBN 978-3-540-65367-7.[1]: A Pascal program for solving the problem. From Discrete Optimization Algorithms with Pascal Programs by MacIej M. Syslo, ISBN 0-13-215509-5.Benchmarks with Hidden Optimum Solutions for Set Covering, Set Packing and Winner DeterminationSolving packaging problem in PHPOptimizing Three-Dimensional Bin Packing