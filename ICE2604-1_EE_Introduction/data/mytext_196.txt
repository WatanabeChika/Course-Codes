circular_queueIn computer science, a circular buffer, circular queue, cyclic buffer or ring buffer is a data structure that uses a single, fixed-size buffer as if it were connected end-to-end. This structure lends itself easily to buffering data streams.[1] There were early circular buffer implementations in hardware.[2][3]A circular buffer first starts out empty and has a set length. In the diagram below is a 7-element buffer:Assume that 1 is written in the center of a circular buffer (the exact starting location is not important in a circular buffer):Then assume that two more elements are added to the circular buffer — 2 &amp; 3 — which get put after 1:If two elements are removed, the two oldest values inside of the circular buffer would be removed. Circular buffers use FIFO (first in, first out) logic. In the example, 1 &amp; 2 were the first to enter the circular buffer, they are the first to be removed, leaving 3 inside of the buffer.If the buffer has 7 elements, then it is completely full:A property of the circular buffer is that when it is full and a subsequent write is performed, then it starts overwriting the oldest data. In the current example, two more elements — A &amp; B — are added and they overwrite the 3 &amp; 4:Alternatively, the routines that manage the buffer could prevent overwriting the data and return an error or raise an exception. Whether or not data is overwritten is up to the semantics of the buffer routines or the application using the circular buffer.Finally, if two elements are now removed then what would be returned is not 3 &amp; 4 but 5 &amp; 6 because A &amp; B overwrote the 3 &amp; the 4 yielding the buffer with:The useful property of a circular buffer is that it does not need to have its elements shuffled around when one is consumed. (If a non-circular buffer were used then it would be necessary to shift all elements when one is consumed.) In other words, the circular buffer is well-suited as a FIFO (first in, first out) buffer while a standard, non-circular buffer is well suited as a LIFO (last in, first out) buffer.Circular buffering makes a good implementation strategy for a queue that has fixed maximum size. Should a maximum size be adopted for a queue, then a circular buffer is a completely ideal implementation; all queue operations are constant time. However, expanding a circular buffer requires shifting memory, which is comparatively costly. For arbitrarily expanding queues, a linked list approach may be preferred instead.In some situations, overwriting circular buffer can be used, e.g. in multimedia. If the buffer is used as the bounded buffer in the producer–consumer problem then it is probably desired for the producer (e.g., an audio generator) to overwrite old data if the consumer (e.g., the sound card) is unable to momentarily keep up. Also, the LZ77 family of lossless data compression algorithms operates on the assumption that strings seen more recently in a data stream are more likely to occur soon in the stream. Implementations store the most recent data in a circular buffer.A circular buffer can be implemented using a pointer and three integers:buffer start in memorybuffer capacity (Length)write to buffer index (end)read from buffer index (start)This image shows a partially full buffer with Length = 7:This image shows a full buffer with four elements (numbers 1 through 4) having been overwritten:In the beginning the indexes end and start are set to 0. The circular buffer write operation writes an element to the end index position and the end index is incremented to the next buffer position. The circular buffer read operation reads an element from the start index position and the start index is incremented to the next buffer position.The start and end indexes are not enough to tell buffer full or empty state while also utilizing all buffer slots,[4] but can if the buffer only has a maximum in-use size of Length - 1.[5] In this case, the buffer is empty if the start and end indexes are equal and full when the in-use size is Length - 1.Another solution is to have another integer count that is incremented at a write operation and decremented at a read operation. Then checking for emptiness means testing count equals 0 and checking for fullness means testing count equals Length.[6]The following source code is a C implementation. Function put() puts an item in the buffer, function get() gets an item from the buffer:A circular-buffer implementation may be optimized by mapping the underlying buffer to two contiguous regions of virtual memory.[7][ ] (Naturally, the underlying buffer‘s length must then equal some multiple of the system’s page size.) Reading from and writing to the circular buffer may then be carried out with greater efficiency by means of direct memory access; those accesses which fall beyond the end of the first virtual-memory region will automatically wrap around to the beginning of the underlying buffer. When the read offset is advanced into the second virtual-memory region, both offsets—read and write—are decremented by the length of the underlying buffer.Perhaps the most common version of the circular buffer uses 8-bit bytes as elements.Some implementations of the circular buffer use fixed-length elements that are bigger than 8-bit bytes—16-bit integers for audio buffers, 53-byte ATM cells for telecom buffers, etc. Each item is contiguous and has the correct data alignment, so software reading and writing these values can be faster than software that handles non-contiguous and non-aligned values.Ping-pong buffering can be considered a very specialized circular buffer with exactly two large fixed-length elements.The bip buffer (bipartite buffer) is very similar to a circular buffer, except it always returns contiguous blocks which can be variable length. This offers nearly all the efficiency advantages of a circular buffer while maintaining the ability for the buffer to be used in APIs that only accept contiguous blocks.[8]Fixed-sized compressed circular buffers use an alternative indexing strategy based on elementary number theory to maintain a fixed-sized compressed representation of the entire data sequence.[9]CircularBuffer at the Portland Pattern RepositoryBoost:Templated Circular Buffer Container: circular_buffer/base.hppSynchronized Bounded Queue:  sync_bounded_queue.hppCB in Linux kernelCB in DSPCircular queue in C Archived 2018-10-29 at the Wayback Machine