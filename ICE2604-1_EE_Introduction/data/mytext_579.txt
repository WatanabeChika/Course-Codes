locality-sensitive_hashingIn computer science, locality-sensitive hashing (LSH) is an algorithmic technique that hashes similar input items into the same "buckets" with high probability.[1] (The number of buckets is much smaller than the universe of possible input items.)[1] Since similar items end up in the same buckets, this technique can be used for data clustering and nearest neighbor search. It differs from conventional hashing techniques in that hash collisions are maximized, not minimized. Alternatively, the technique can be seen as a way to reduce the dimensionality of high-dimensional data; high-dimensional input items can be reduced to low-dimensional versions while preserving relative distances between items.Hashing-based approximate nearest neighbor search algorithms generally use one of two main categories of hashing methods: either data-independent methods, such as locality-sensitive hashing (LSH); or data-dependent methods, such as locality-preserving hashing (LPH).[2][3]An LSH family[1][4][5] is defined for a metric space ,a threshold ,an approximation factor ,and probabilities  and .This family  is a set of functions  that map elements of the metric space to buckets .  An LSH family must satisfy the following conditions for any two points  and any hash function  chosen uniformly at random from :if , then  (i.e.,  and  collide) with probability at least ,if , then  with probability at most .A family is interesting when .  Such a family  is called -sensitive.Alternatively[6] it is defined with respect to a universe of items  that have a similarity function . An LSH scheme is a family of hash functions  coupled with a probability distribution  over the functions such that a function  chosen according to  satisfies the property that  for any .A locality-preserving hash is a hash function  that maps points in a metric space  to a scalar value such that for any three points .[]In other words, these are hash functions where the relative distance between the input values is preserved in the relative distance between the output hash values; input values that are closer to each other will produce output hash values that are closer to each other.This is in contrast to cryptographic hash functions and checksums, which are designed to have random output difference between adjacent inputs.The first family of locality-preserving hash functions was devised as a way to facilitate data pipelining in implementations of parallel random-access machine (PRAM) algorithms that use universal hashing to reduce memory contention and network congestion.[7][8]Locality preserving hashes are related to space-filling curves.[]Given a -sensitive family , we can construct new families  by either the AND-construction or OR-construction of .[1]To create an AND-construction, we define a new family  of hash functions , where each function  is constructed from  random functions  from .  We then say that for a hash function ,  if and only if all  for .  Since the members of  are independently chosen for any ,  is a -sensitive family.To create an OR-construction, we define a new family  of hash functions , where each function  is constructed from  random functions  from .  We then say that for a hash function ,  if and only if  for one or more values of .  Since the members of  are independently chosen for any ,  is a -sensitive family.LSH has been applied to several problem domains, including:Near-duplicate detection[9]Hierarchical clustering[10][11]Genome-wide association study[12]Image similarity identificationVisualRankGene expression similarity identification[]Audio similarity identificationNearest neighbor searchAudio fingerprint[13]Digital video fingerprintingPhysical data organization in database management systems[14]Training fully connected neural networks[15][16]Computer security[17]One of the easiest ways to construct an LSH family is by bit sampling.[5] This approach works for the Hamming distance over -dimensional vectors . Here, the family  of hash functions is simply the family of all the projections of points on one of the  coordinates, i.e., , where  is the th coordinate of . A random function  from  simply selects a random bit from the input point. This family has the following parameters: , .[]Suppose   is composed of subsets of some ground set of enumerable items  and the similarity function of interest is the Jaccard index . If  is a permutation on the indices of , for  let . Each possible choice of  defines a single hash function  mapping input sets to elements of .Define the function family  to be the set of all such functions and let  be the uniform distribution. Given two sets  the event that  corresponds exactly to the event that the minimizer of  over  lies inside . As  was chosen uniformly at random,  and  define an LSH scheme for the Jaccard index.Because the symmetric group on  elements has size !, choosing a truly random permutation from the full symmetric group is infeasible for even moderately sized . Because of this fact, there has been significant work on finding a family of permutations that is "min-wise independent" â€” a permutation family for which each element of the domain has equal probability of being the minimum under a randomly chosen . It has been established that a min-wise independent family of permutations is at least of size ,[18] and that this bound is tight.[19]Because min-wise independent families are too big for practical applications, two variant notions of min-wise independence are introduced: restricted min-wise independent permutations families, and approximate min-wise independent families.Restricted min-wise independence is the min-wise independence property restricted to certain sets of cardinality at most .[20]Approximate min-wise independence differs from the property by at most a fixed .[21]Nilsimsa is a locality-sensitive hashing algorithm used in anti-spam efforts.[22] The goal of Nilsimsa is to generate a hash digest of an email message such that the digests of two similar messages are similar to each other.  The paper suggests that the Nilsimsa satisfies three requirements:The digest identifying each message should not vary significantly for changes that can be produced automatically.The encoding must be robust against intentional attacks.The encoding should support an extremely low risk of false positives.TLSH is locality-sensitive hashing algorithm designed for a range of security and digital forensic applications.[17] The goal of TLSH is to generate hash digests for messages such that low distances between digests indicate that their corresponding messages are likely to be similar.Testing performed in the paper on a range of file types identified the Nilsimsa hash as having a significantly higher false positive rate when compared to other similarity digest schemes such as TLSH, Ssdeep and Sdhash.An implementation of TLSH is available as open-source software.[23]The random projection method of LSH due to Moses Charikar[6] called SimHash (also sometimes called arccos[24]) is designed to approximate the cosine distance between vectors. The basic idea of this technique is to choose a random hyperplane (defined by a normal unit vector ) at the outset and use the hyperplane to hash input vectors.Given an input vector  and a hyperplane defined by , we let . That is,   depending on which side of the hyperplane  lies.Each possible choice of  defines a single function. Let  be the set of all such functions and let  be the uniform distribution once again. It is not difficult to prove that, for two vectors , , where  is the angle between  and .  is closely related to .In this instance hashing produces only a single bit. Two vectors' bits match with probability proportional to the cosine of the angle between them.The hash function[25]  maps a -dimensional vector onto the set of integers. Each hash functionin the family is indexed by a choice of random  and where  is a -dimensional vector withentries chosen independently from a stable distribution and  isa real number chosen uniformly from the range [0,r]. For a fixed the hash function  isgiven by .Other construction methods for hash functions have been proposed to better fit the data. [26]In particular k-means hash functions are better in practice than projection-based hash functions, but without any theoretical guarantee.Semantic hashing is a technique that attempts to map input items to addresses such that closer inputs have higher semantic similarity.[27] The hashcodes are found via training of an artificial neural network or graphical model.[]One of the main applications of LSH is to provide a method for efficient approximate nearest neighbor search algorithms.  Consider an LSH family .  The algorithm has two main parameters: the width parameter  and the number of hash tables .In the first step, we define a new family  of hash functions , where each function  is obtained by concatenating  functions  from , i.e., .  In other words, a random hash function  is obtained by concatenating  randomly chosen hash functions from .  The algorithm then constructs  hash tables, each corresponding to a different randomly chosen hash function .In the preprocessing step we hash all  -dimensional points from the data set  into each of the  hash tables.  Given that the resulting hash tables have only  non-zero entries, one can reduce the amount of memory used per each hash table to  using standard hash functions.Given a query point , the algorithm iterates over the  hash functions .  For each  considered, it retrieves the data points that are hashed into the same bucket as .  The process is stopped as soon as a point within distance  from  is found.Given the parameters  and , the algorithm has the following performance guarantees:preprocessing time: , where  is the time to evaluate a function  on an input point ;space: , plus the space for storing data points;query time: ;the algorithm succeeds in finding a point within distance  from  (if there exists a point within distance ) with probability at least ;For a fixed approximation ratio  and probabilities  and , one can set  and , where . Then one obtains the following performance guarantees:preprocessing time: ;space: , plus the space for storing data points;query time: ;When  is large, it is possible to reduce the hashing time from .This was shown by[28] and[29] which gavequery time: ;space: ;It is also sometimes the case that the factor  can be very large.This happens for example with Jaccard similarity data, where even the most similar neighbor often has a quite low Jaccard similarity with the query.In[30] it was shown how to reduce the query time to  (not including hashing costs) and similarly the space usage.Bloom filterCurse of dimensionalityFeature hashingFourier-related transformsGeohashMultilinear subspace learningPrincipal component analysisRandom indexing[31]Rolling hashSingular value decompositionSparse distributed memoryWavelet compressionSamet, H. (2006) Foundations of Multidimensional and Metric Data Structures. Morgan Kaufmann. ISBNÂ 0-12-369446-9Indyk, Piotr; Motwani, Rajeev; Raghavan, Prabhakar; Vempala, Santosh (1997). "Locality-preserving hashing in multidimensional spaces". Proceedings of the twenty-ninth annual ACM symposium on Theory of computing. STOC '97. pp.Â 618â€“625. CiteSeerXÂ . doi:10.1145/258533.258656. ISBNÂ 978-0-89791-888-6. S2CIDÂ 15693787.Chin, Andrew (1994). "Locality-preserving hash functions for general purpose parallel computation" . Algorithmica. 12 (2â€“3): 170â€“181. doi:10.1007/BF01185209. S2CIDÂ 18108051.Alex Andoni's LSH homepageLSHKIT: A C++ Locality Sensitive Hashing LibraryA Python Locality Sensitive Hashing library that optionally supports persistence via redisCaltech Large Scale Image Search Toolbox: a Matlab toolbox implementing several LSH hash functions, in addition to Kd-Trees, Hierarchical K-Means, and Inverted File search algorithms.Slash: A C++ LSH library, implementing Spherical LSH by Terasawa, K., Tanaka, YLSHBOX: An Open Source C++ Toolbox of Locality-Sensitive Hashing for Large Scale Image Retrieval, Also Support Python and MATLAB.SRS: A C++ Implementation of An In-memory, Space-efficient Approximate Nearest Neighbor Query Processing Algorithm based on p-stable Random ProjectionTLSH open source on GithubJavaScript port of TLSH (Trend Micro Locality Sensitive Hashing) bundled as node.js moduleJava port of TLSH (Trend Micro Locality Sensitive Hashing) bundled as maven package