big-O_notationFit approximationConceptsOrders of approximationScale analysis · Big O notationCurve fitting · False precisionSignificant figuresOther fundamentalsApproximation · Generalization errorTaylor polynomialScientific modellingBig O notation is a mathematical notation that describes the limiting behavior of a function when the argument tends towards a particular value or infinity. Big O is a member of a family of notations invented by Paul Bachmann,[1] Edmund Landau,[2] and others, collectively called Bachmann–Landau notation or asymptotic notation.  The letter O was chosen by Bachmann to stand for Ordnung, meaning the order of approximation.In computer science, big O notation is used to classify algorithms according to how their run time or space requirements grow as the input size grows.[3]  In analytic number theory, big O notation is often used to express a bound on the difference between an arithmetical function and a better understood approximation; a famous example of such a difference is the remainder term in the prime number theorem. Big O notation is also used in many other fields to provide similar estimates.Big O notation characterizes functions according to their growth rates: different functions with the same growth rate may be represented using the same O notation. The letter O is used because the growth rate of a function is also referred to as the order of the function.  A description of a function in terms of big O notation usually only provides an upper bound on the growth rate of the function.Associated with big O notation are several related notations, using the symbols , and , to describe other kinds of bounds on asymptotic growth rates.Let , the function to be estimated, be a real or complex valued function and let , the comparison function, be a real valued function. Let both functions be defined on some unbounded subset of the positive real numbers, and  be strictly positive for all large enough values of .[4] One writesif the absolute value of  is at most a positive constant multiple of  for all sufficiently large values of . That is,  if there exists a positive real number  and a real number  such thatIn many contexts, the assumption that we are interested in the growth rate as the variable  goes to infinity is left unstated, and one writes more simply thatThe notation can also be used to describe the behavior of  near some real number  (often, ): we sayif there exist positive numbers  and  such that for all defined  with ,As  is chosen to be strictly positive for such values of , both of these definitions can be unified using the limit superior:ifAnd in both of these definitions the limit point  (whether  or not) is a cluster point of the domains of  and , i. e., in every neighbourhood of  there have to be infinitely many points in common. Moreover, as pointed out in the article about the limit inferior and limit superior, the  (at least on the extended real number line) always exists.In computer science, a slightly more restrictive definition is common:  and  are both required to be functions from some unbounded subset of the positive integers to the nonnegative real numbers; then  iff there exist positive integer numbers  and  such that  for all .[5]In typical usage the  notation is asymptotical, that is, it refers to very large .  In this setting, the contribution of the terms that grow "most quickly" will eventually make the other ones irrelevant. As a result, the following simplification rules can be applied:If  is a sum of several terms, if there is one with largest growth rate, it can be kept, and all others omitted.If  is a product of several factors, any constants (terms in the product that do not depend on ) can be omitted.For example, let , and suppose we wish to simplify this function, using  notation, to describe its growth rate as  approaches infinity. This function is the sum of three terms: , , and . Of these three terms, the one with the highest growth rate is the one with the largest exponent as a function of , namely . Now one may apply the second rule:  is a product of  and  in which the first factor does not depend on . Omitting this factor results in the simplified form . Thus, we say that  is a "big O" of . Mathematically, we can write . One may confirm this calculation using the formal definition: let  and . Applying the formal definition from above, the statement that  is equivalent to its expansion,for some suitable choice of  and  and for all . To prove this, let  and . Then, for all :soBig O notation has two main areas of application:In mathematics, it is commonly used to describe how closely a finite series approximates a given function, especially in the case of a truncated Taylor series or asymptotic expansionIn computer science, it is useful in the analysis of algorithmsIn both applications, the function  appearing within the  is typically chosen to be as simple as possible, omitting constant factors and lower order terms.There are two formally close, but noticeably different, usages of this notation:[]infinite asymptoticsinfinitesimal asymptotics.This distinction is only in application and not in principle, however—the formal definition for the "big O" is the same for both cases, only with different limits for the function argument.[]Big O notation is useful when analyzing algorithms for efficiency. For example, the time (or the number of steps) it takes to complete a problem of size  might be found to be . As  grows large, the  term will come to dominate, so that all other terms can be neglected—for instance when , the term  is 1000 times as large as the  term. Ignoring the latter would have negligible effect on the expression's value for most purposes. Further, the coefficients become irrelevant if we compare to any other order of expression, such as an expression containing a term  or . Even if , if , the latter will always exceed the former once  grows larger than  (). Additionally, the number of steps depends on the details of the machine model on which the algorithm runs, but different types of machines typically vary by only a constant factor in the number of steps needed to execute an algorithm. So the big O notation captures what remains: we write eitherorand say that the algorithm has order of  time complexity. The sign "" is not meant to express "is equal to" in its normal mathematical sense, but rather a more colloquial "is", so the second expression is sometimes considered more accurate (see the "Equals sign" discussion below) while the first is considered by some as an abuse of notation.[6]Big O can also be used to describe the error term in an approximation to a mathematical function. The most significant terms are written explicitly, and then the least-significant terms are summarized in a single big O term.  Consider, for example, the exponential series and two expressions of it that are valid when  is small:The second expression (the one with O(x3)) means the absolute-value of the error ex − (1 + x + x2/2) is at most some constant times |x3| when x is close enough to 0.If the function  can be written as a finite sum of other functions, then the fastest growing one determines the order of . For example,In particular, if a function may be bounded by a polynomial in , then as  tends to infinity, one may disregard lower-order terms of the polynomial. The sets  and  are very different. If  is greater than one, then the latter grows much faster. A function that grows faster than  for any   is called superpolynomial.  One that grows more slowly than any exponential function of the form  is called subexponential. An algorithm can require time that is both superpolynomial and subexponential; examples of this include the fastest known algorithms for integer factorization and the function .We may ignore any powers of  inside of the logarithms. The set  is exactly the same as . The logarithms differ only by a constant factor (since ) and thus the big O notation ignores that. Similarly, logs with different constant bases are equivalent. On the other hand, exponentials with different bases are not of the same order. For example,  and  are not of the same order.Changing units may or may not affect the order of the resulting algorithm. Changing units is equivalent to multiplying the appropriate variable by a constant wherever it appears. For example, if an algorithm runs in the order of , replacing  by  means the algorithm runs in the order of , and the big O notation ignores the constant . This can be written as . If, however, an algorithm runs in the order of , replacing  with  gives . This is not equivalent to  in general. Changing variables may also affect the order of the resulting algorithm. For example, if an algorithm's run time is  when measured in terms of the number  of digits of an input number , then its run time is  when measured as a function of the input number  itself, because .If  and  then . It follows that if  and  then .  In other words, this second statement says that  is a convex cone.Let  be a nonzero constant. Then .  In other words, if , then  Big O (and little o, Ω, etc.) can also be used with multiple variables. To define big O formally for multiple variables, suppose  and  are two functions defined on some subset of . We sayif and only if there exist constants  and  such that  for all  with  for some [7]Equivalently, the condition that  for some  can be written , where  denotes the Chebyshev norm. For example, the statementasserts that there exist constants C and M such thatwhenever either  or  holds.  This definition allows all of the coordinates of  to increase to infinity. In particular, the statement(i.e., ) is quite different from(i.e., ).Under this definition, the subset on which a function is defined is significant when generalizing statements from the univariate setting to the multivariate setting. For example, if  and , then  if we restrict  and  to , but not if they are defined on .This is not the only generalization of big O to multivariate functions, and in practice, there is some inconsistency in the choice of definition.[8]The statement "f(x) is O(g(x))" as defined above is usually written as . Some consider this to be an abuse of notation, since the use of the equals sign could be misleading as it suggests a symmetry that this statement does not have. As de Bruijn says,  is true but  is not.[9] Knuth describes such statements as "one-way equalities", since if the sides could be reversed, "we could deduce ridiculous things like  from the identities  and ."[10] In another letter, Knuth also pointed out that "the equality sign is not symmetric with respect to such notations", as, in this notation, "mathematicians customarily use the = sign as they use the word "is" in English: Aristotle is a man, but a man isn't necessarily Aristotle".[11]For these reasons, it would be more precise to use set notation and write  (read as: "f(x) is an element of O(g(x))", or "f(x) is in the set O(g(x))"), thinking of O(g(x)) as the class of all functions h(x) such that |h(x)| ≤ C|g(x)| for some constant C.[10] However, the use of the equals sign is customary.[9][10]Big O notation can also be used in conjunction with other arithmetic operators in more complicated equations. For example,  denotes the collection of functions having the growth of h(x) plus a part whose growth is limited to that of f(x). Thus,expresses the same asSuppose an algorithm is being developed to operate on a set of n elements. Its developers are interested in finding a function T(n)  that will express how long the algorithm will take to run (in some arbitrary measurement of time) in terms of the number of elements in the input set. The algorithm works by first calling a subroutine to sort the elements in the set and then perform its own operations. The sort has a known time complexity of O(n2), and after the subroutine runs the algorithm must take an additional  steps before it terminates.  Thus the overall time complexity of the algorithm can be expressed as . Here the terms  are subsumed within the faster-growing O(n2).  Again, this usage disregards some of the formal meaning of the "=" symbol, but it does allow one to use the big O notation as a kind of convenient placeholder.In more complicated usage, O(·) can appear in different places in an equation, even several times on each side. For example, the following are true for :The meaning of such statements is as follows: for any functions which satisfy each O(·) on the left side, there are some functions satisfying each O(·) on the right side, such that substituting all these functions into the equation makes the two sides equal. For example, the third equation above means: "For any function f(n) = O(1), there is some function g(n)  = O(en) such that nf(n) = g(n)." In terms of the "set notation" above, the meaning is that the class of functions represented by the left side is a subset of the class of functions represented by the right side. In this use the "=" is a formal symbol that unlike the usual use of "=" is not a symmetric relation. Thus for example  does not imply the false statement .Big O is typeset as an italicized uppercase "O", as in the following example: .[12][13]  In TeX, it is produced by simply typing O inside math mode.  Unlike Greek-named Bachmann–Landau notations, it needs no special symbol. Yet, some authors use the calligraphic variant  instead.[14][15]Here is a list of classes of functions that are commonly encountered when analyzing the running time of an algorithm.  In each case, c is a positive constant and n increases without bound. The slower-growing functions are generally listed first.NotationNameExampleconstantDetermining if a binary number is even or odd; Calculating ; Using a constant-size lookup tabledouble logarithmicAverage number of comparisons spent finding an item using interpolation search in a sorted array of uniformly distributed valueslogarithmicFinding an item in a sorted array with a binary search or a balanced search tree as well as all operations in a binomial heappolylogarithmicMatrix chain ordering can be solved in polylogarithmic time on a parallel random-access machine.fractional powerSearching in a k-d treelinearFinding an item in an unsorted list or in an unsorted array; adding two n-bit integers by ripple carryn log-star nPerforming triangulation of a simple polygon using Seidel's algorithm, or the union–find algorithm. Note that linearithmic, loglinear, quasilinear, or "n log n"Performing a fast Fourier transform; fastest possible comparison sort; heapsort and merge sortquadraticMultiplying two n-digit numbers by schoolbook multiplication; simple sorting algorithms, such as bubble sort, selection sort and insertion sort; (worst-case) bound on some usually faster sorting algorithms such as quicksort, Shellsort, and tree sortpolynomial or algebraicTree-adjoining grammar parsing; maximum matching for bipartite graphs; finding the determinant with LU decompositionL-notation or sub-exponentialFactoring a number using the quadratic sieve or number field sieveexponentialFinding the (exact) solution to the travelling salesman problem using dynamic programming; determining if two logical statements are equivalent using brute-force searchfactorialSolving the travelling salesman problem via brute-force search; generating all unrestricted permutations of a poset; finding the determinant with Laplace expansion; enumerating all partitions of a setThe statement  is sometimes weakened to  to derive simpler formulas for asymptotic complexity. For any  and ,  is a subset of  for any , so may be considered as a polynomial with some bigger order.Big O is widely used in computer science. Together with some other related notations it forms the family of Bachmann–Landau notations.[]Intuitively, the assertion " is " (read " is little-o of ") means that  grows much faster than . As before, let f be a real or complex valued function and g a real valued function, both defined on some unbounded subset of the positive real numbers, such that g(x) is strictly positive for all large enough values of x. One writesif for every positive constant  there exists a constant  such that[16]For example, one has and      both as The difference between the definition of the big-O notation and the definition of little-o is that while the former has to be true for at least one constant M, the latter must hold for every positive constant , however small.[17] In this way, little-o notation makes a stronger statement than the corresponding big-O notation: every function that is little-o of g is also big-O of g, but not every function that is big-O of g is also little-o of g. For example,  but .As g(x) is nonzero, or at least becomes nonzero beyond a certain point, the relation  is equivalent to (and this is in fact how Landau[16] originally defined the little-o notation).Little-o respects a number of arithmetic operations.  For example,if  is a nonzero constant and  then , andif  and  then It also satisfies a transitivity relation:if  and  then Another asymptotic notation is , read "big omega".[18] There are two widespread and incompatible definitions of the statement as ,where a is some real number, ∞,  or −∞, where f and g are real functions defined in a neighbourhood of a, and where g is positive in this neighbourhood.The Hardy–Littlewood definition is used mainly in analytic number theory, and the Knuth definition mainly in computational complexity theory; the definitions are not equivalent.In 1914 Godfrey Harold Hardy and John Edensor Littlewood introduced the new symbol ,[19] which is defined as follows: as  if Thus  is the negation of .In 1916 the same authors introduced the two new symbols  and , defined as:[20] as  if ; as  if These symbols were used by Edmund Landau, with the same meanings, in 1924.[21]  After Landau, the notations were never used again exactly thus;  became  and  became .[]These three symbols , as well as  (meaning that  and  are both satisfied), are now currently used in analytic number theory.[22][23]We have as and more precisely as We have as and more precisely as however as In 1976 Donald Knuth published a paper to justify his use of the -symbol to describe a stronger property.[24] Knuth wrote: "For all the applications I have seen so far in computer science, a stronger requirement ... is much more appropriate". He definedwith the comment: "Although I have changed Hardy and Littlewood's definition of , I feel justified in doing so because their definition is by no means in wide use, and because there are other ways to say what they want to say in the comparatively rare cases when their definition applies."[24]NotationName[24]DescriptionFormal definitionLimit definition[25][26][27][24][19]Small O; Small Oh is dominated by  asymptoticallyBig O; Big Oh; Big Omicron is bounded above by  (up to constant factor) asymptoticallyBig Theta is bounded both above and below by  asymptotically  and  (Knuth version)On the order of is equal to  asymptoticallyBig Omega in complexity theory (Knuth) is bounded below by  asymptoticallySmall Omega dominates  asymptoticallyBig Omega in number theory (Hardy–Littlewood) is not dominated by  asymptoticallyThe limit definitions assume  for sufficiently large . The table is (partly) sorted from smallest to largest, in the sense that  (Knuth's version of)  on functions correspond to  on the real line[27] (the Hardy–Littlewood version of , however, doesn't correspond to any such description).Computer science uses the big , big Theta , little , little omega  and Knuth's big Omega  notations.[28] Analytic number theory often uses the big , small , Hardy–Littlewood's big Omega  (with or without the +, − or ± subscripts) and  notations.[22] The small omega  notation is not used as often in analysis.[29]Informally, especially in computer science, the big O notation often can be used somewhat differently to describe an asymptotic tight bound where using big Theta Θ notation might be more factually appropriate in a given context.[] For example, when considering a function T(n) = 73n3 + 22n2 + 58, all of the following are generally acceptable, but tighter bounds (such as numbers 2 and 3 below) are usually strongly preferred over looser bounds (such as number 1 below).The equivalent English statements are respectively:T(n) grows asymptotically no faster than n100T(n) grows asymptotically no faster than n3T(n) grows asymptotically as fast as n3.So while all three statements are true, progressively more information is contained in each. In some fields, however, the big O notation (number 2 in the lists above) would be used more commonly than the big Theta notation (items numbered 3 in the lists above). For example, if T(n) represents the running time of a newly developed algorithm for input size n, the inventors and users of the algorithm might be more inclined to put an upper asymptotic bound on how long it will take to run without making an explicit statement about the lower asymptotic bound.In their book Introduction to Algorithms, Cormen, Leiserson, Rivest and Stein consider the set of functions f which satisfyIn a correct notation this set can, for instance, be called O(g), where[30]The authors state that the use of equality operator (=) to denote set membership rather than the set membership operator (∈) is an abuse of notation, but that doing so has advantages.[6] Inside an equation or inequality, the use of asymptotic notation stands for an anonymous function in the set O(g), which eliminates lower-order terms, and helps to reduce inessential clutter in equations, for example:[31]Another notation sometimes used in computer science is Õ (read soft-O): f(n) = Õ(g(n)) is shorthand for  for some k.[32] Some authors write O* for the same purpose.[33] Essentially, it is big O notation, ignoring logarithmic factors because the growth-rate effects of some other super-logarithmic function indicate a growth-rate explosion for large-sized input parameters that is more important to predicting bad run-time performance than the finer-point effects contributed by the logarithmic-growth factor(s). This notation is often used to obviate the "nitpicking" within growth-rates that are stated as too tightly bounded for the matters at hand (since logk n is always o(nε) for any constant k and any ).Also the L notation, defined asis convenient for functions that are between polynomial and exponential in terms of .The generalization to functions taking values in any normed vector space is straightforward (replacing absolute values by norms), where f and g need not take their values in the same space. A generalization to functions g taking values in any topological group is also possible[].The "limiting process" x → xo can also be generalized by introducing an arbitrary filter base, i.e. to directed nets f and g. The o notation can be used to define derivatives and differentiability in quite general spaces, and also (asymptotical) equivalence of functions,which is an equivalence relation and a more restrictive notion than the relationship "f is Θ(g)" from above. (It reduces to lim f / g = 1 if f and g are positive real valued functions.)  For example, 2x is Θ(x), but  is not o(x).The symbol O was first introduced by number theorist Paul Bachmann in 1894, in the second volume of his book Analytische Zahlentheorie ("analytic number theory").[1] The number theorist Edmund Landau adopted it, and was thus inspired to introduce in 1909 the notation o;[2] hence both are now called Landau symbols. These notations were used in applied mathematics during the 1950s for asymptotic analysis.[34]The symbol  (in the sense "is not an o of") was introduced in 1914 by Hardy and Littlewood.[19] Hardy and Littlewood also introduced in 1916 the symbols  ("right") and  ("left"),[20]  precursors of the modern symbols  ("is not smaller than a small o of") and  ("is not larger than a small o of"). Thus the Omega symbols (with their original meanings) are sometimes also referred to as "Landau symbols". This notation  became commonly used in number theory at least since the 1950s.[35]In the 1970s the big O was popularized in computer science by Donald Knuth, who introduced the related Theta notation, and proposed a different definition for the Omega notation.[24]Landau never used the big Theta and small omega symbols.Hardy's symbols were (in terms of the modern O notation)   and   (Hardy however never defined or used the notation , nor , as it has been sometimes reported).Hardy introduced the symbols  and  (as well as some other symbols) in his 1910 tract "Orders of Infinity", and made use of them only in three papers (1910–1913). In his nearly 400 remaining papers and books he consistently used the Landau symbols O and o.Hardy's notation is not used anymore. On the other hand, in the 1930s,[36] the Russian number theorist  Ivan Matveyevich Vinogradov  introduced his notation	, which  has been increasingly used in number theory instead of  the  notation. We haveand frequently both notations are used in the same paper.The big-O originally stands for "order of" ("Ordnung", Bachmann 1894), and is thus a Latin letter. Neither Bachmann nor Landau ever call it "Omicron". The symbol was much later on (1976) viewed by Knuth as a capital omicron,[24] probably in reference to his definition of the symbol Omega. The digit zero should not be used.Asymptotic expansion: Approximation of functions generalizing Taylor's formulaAsymptotically optimal algorithm: A phrase frequently used to describe an algorithm that has an upper bound asymptotically within a constant of a lower bound for the problemBig O in probability notation: Op, opLimit inferior and limit superior: An explanation of some of the limit notation used in this articleMaster theorem (analysis of algorithms): For analyzing divide-and-conquer recursive algorithms using Big O notationNachbin's theorem: A precise method of bounding complex analytic functions so that the domain of convergence of integral transforms can be statedOrder of approximationComputational complexity of mathematical operationsHardy, G. H. (1910). Orders of Infinity: The 'Infinitärcalcül' of Paul du Bois-Reymond. Cambridge University Press.Knuth, Donald (1997). "1.2.11: Asymptotic Representations". Fundamental Algorithms. The Art of Computer Programming. Vol. 1 (3rd ed.). Addison-Wesley. ISBN 978-0-201-89683-1.Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2001). "3.1: Asymptotic notation". Introduction to Algorithms (2nd ed.). MIT Press and McGraw-Hill. ISBN 978-0-262-03293-3.Sipser, Michael (1997). . PWS Publishing. pp. 226–228. ISBN 978-0-534-94728-6.Avigad, Jeremy; Donnelly, Kevin (2004). Formalizing O notation in Isabelle/HOL . International Joint Conference on Automated Reasoning. doi:10.1007/978-3-540-25984-8_27.Black, Paul E. (11 March 2005).  Black, Paul E. (ed.). "big-O notation". Dictionary of Algorithms and Data Structures. U.S. National Institute of Standards and Technology 2006.Black, Paul E. (17 December 2004).  Black, Paul E. (ed.). "little-o notation". Dictionary of Algorithms and Data Structures. U.S. National Institute of Standards and Technology 2006.Black, Paul E. (17 December 2004).  Black, Paul E. (ed.). "Ω". Dictionary of Algorithms and Data Structures. U.S. National Institute of Standards and Technology 2006.Black, Paul E. (17 December 2004).  Black, Paul E. (ed.). "ω". Dictionary of Algorithms and Data Structures. U.S. National Institute of Standards and Technology 2006.Black, Paul E. (17 December 2004).  Black, Paul E. (ed.). "Θ". Dictionary of Algorithms and Data Structures. U.S. National Institute of Standards and Technology 2006.Growth of sequences — OEIS (Online Encyclopedia of Integer Sequences) WikiIntroduction to Asymptotic NotationsLandau SymbolsBig-O Notation – What is it good forBig O Notation explained in plain englishAn example of Big O in accuracy of central divided difference scheme for first derivative Archived 2018-10-07 at the Wayback MachineA Gentle Introduction to Algorithm Complexity Analysis