blocking_flowDinic's algorithm or Dinitz's algorithm is a strongly polynomial algorithm for computing the maximum flow in a flow network, conceived in 1970 by Israeli (formerly Soviet) computer scientist Yefim (Chaim) A. Dinitz.[1] The algorithm runs in  time and is similar to the Edmonds–Karp algorithm, which runs in  time, in that it uses shortest augmenting paths. The introduction of the concepts of the level graph and blocking flow enable Dinic's algorithm to achieve its performance.Yefim Dinitz invented this algorithm in response to a pre-class exercise in Adelson-Velsky's algorithms class. At the time he was not aware of the basic facts regarding the Ford–Fulkerson algorithm.[2]Dinitz mentions inventing his algorithm in January 1969, which was published in 1970 in the journal Doklady Akademii Nauk SSSR. In 1974, Shimon Even and (his then Ph.D. student) Alon Itai at the Technion in Haifa were very curious and intrigued by Dinitz's algorithm as well as Alexander V. Karzanov's related idea of blocking flow. However it was hard for them to decipher these two papers, each being limited to four pages to meet the restrictions of journal Doklady Akademii Nauk SSSR. Even did not give up, and after three days of effort managed to understand both papers except for the layered network maintenance issue. Over the next couple of years, Even gave lectures on "Dinic's algorithm", mispronouncing the name of the author while popularizing it. Even and Itai also contributed to this algorithm by combining BFS and DFS, which is how the algorithm is now commonly presented.[3]For about 10 years of time after the Ford–Fulkerson algorithm was invented, it was unknown if it could be made to terminate in polynomial time in the general case of irrational edge capacities. This caused a lack of any known polynomial-time algorithm to solve the max flow problem in generic cases. Dinitz's algorithm and the Edmonds–Karp algorithm (published in 1972) both independently showed that in the Ford–Fulkerson algorithm, if each augmenting path is the shortest one, then the length of the augmenting paths is non-decreasing and the algorithm always terminates.Let  be a network with  and  the capacity and the flow of the edge , respectively.The residual capacity is a mapping  defined as,if ,if , otherwise.The residual graph is an unweighted graph , where.An augmenting path is an – path in the residual graph .Define  to be the length of the shortest path from  to  in . Then the level graph of  is the graph , where.A blocking flow is an – flow  such that the graph  with  contains no – path. [Note 1][4]Dinic's AlgorithmInput: A network .Output: An – flow  of maximum value.Set  for each .Construct  from  of . If , stop and output .Find a blocking flow  in .Add augment flow  by  and go back to step 2.It can be shown that the number of layers in each blocking flow increases by at least 1 each time and thus there are at most  blocking flows in the algorithm. For each of them:the level graph  can be constructed by breadth-first search in  timea blocking flow in the level graph  can be found in  time[Note 2]with total running time  for each layer. As a consequence, the running time of Dinic's algorithm is .[5]Using a data structure called dynamic trees, the running time of finding a blocking flow in each phase can be reduced to  and therefore the running time of Dinic's algorithm can be improved to .In networks with unit capacities, a much stronger time bound holds. Each blocking flow can be found in  time, and it can be shown that the number of phases does not exceed  and . Thus the algorithm runs in  time.[6]In networks that arise from the bipartite matching problem, the number of phases is bounded by , therefore leading to the  time bound. The resulting algorithm is also known as Hopcroft–Karp algorithm. More generally, this bound holds for any unit network — a network in which each vertex, except for source and sink, either has a single entering edge of capacity one, or a single outgoing edge of capacity one, and all other capacities are arbitrary integers.[4]The following is a simulation of Dinic's algorithm. In the level graph , the vertices with labels in red are the values . The paths in blue form a blocking flow.1.The blocking flow consists of with 4 units of flow, with 6 units of flow, and with 4 units of flow.Therefore, the blocking flow is of 14 units and the value of flow  is 14. Note that each augmenting path in the blocking flow has 3 edges.2.The blocking flow consists of with 5 units of flow.Therefore, the blocking flow is of 5 units and the value of flow  is 14 + 5 = 19. Note that each augmenting path has 4 edges.3.Since  cannot be reached in , the algorithm terminates and returns a flow with maximum value of 19. Note that in each blocking flow, the number of edges in the augmenting path increases by at least 1.Ford–Fulkerson algorithmMaximum flow problemYefim Dinitz (2006). "Dinitz' Algorithm: The Original Version and Even's Version" .  In Oded Goldreich; Arnold L. Rosenberg; Alan L. Selman (eds.). Theoretical Computer Science: Essays in Memory of Shimon Even. Springer. pp. 218–240. ISBN 978-3-540-32880-3.Tarjan, R. E. (1983). Data structures and network algorithms.B. H. Korte; Jens Vygen (2008). "8.4 Blocking Flows and Fujishige's Algorithm". Combinatorial Optimization: Theory and Algorithms (Algorithms and Combinatorics, 21). Springer Berlin Heidelberg. pp. 174–176. ISBN 978-3-540-71844-4.