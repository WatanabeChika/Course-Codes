subtreeIn computer science, a tree is a widely used abstract data type that represents a hierarchical tree structure with a set of connected nodes. Each node in the tree can be connected to many children (depending on the type of tree), but must be connected to exactly one parent, except for the root node, which has no parent. These constraints mean there are no cycles or "loops" (no node can be its own ancestor), and also that each child can be treated like the root node of its own subtree, making recursion a useful technique for tree traversal. In contrast to linear data structures, many trees cannot be represented by relationships between neighboring nodes in a single straight line.Binary trees are a commonly used type, which constrain the number of children for each parent to exactly two. When the order of the children is specified, this data structure corresponds to an  ordered tree in graph theory. A value or pointer to other data may be associated with every node in the tree, or sometimes only with the leaf nodes, which have no children.The abstract data type can be represented in a number of ways, including a list of parents with pointers to children, a list of children with pointers to parents, or a list of nodes and a separate list of parent-child relations (a specific type of adjacency list). Representations might also be more complicated, for example using indexes or ancestor lists for performance.Trees as used in computing are similar to but can be different from mathematical constructs of trees in graph theory, trees in set theory, and trees in descriptive set theory.Trees are commonly used to represent or manipulate hierarchical data in applications such as:File systems for:Directory structure used to organize subdirectories and files (symbolic links create non-tree graphs, as do multiple hard links to the same file or directory)The mechanism used to allocate and link blocks of data on the storage deviceClass hierarchy or "inheritance tree" showing the relationships among classes in object-oriented programming; multiple inheritance produces non-tree graphsAbstract syntax trees for computer languagesNatural language processing:Parse treesModeling utterances in a generative grammarDialogue tree for generating conversationsDocument Object Models ("DOM tree") of XML and HTML documentsSearch trees store data in a way that makes an efficient search algorithm possible via tree traversalA binary search tree is a type of binary treeRepresenting sorted lists of dataComputer-generated imagery:Space partitioning, including binary space partitioningDigital compositingStoring Barnes–Hut trees used to simulate galaxiesImplementing heapsNested setsHierarchical taxonomies such as the Dewey Decimal Classification with sections of increasing specificity.Hierarchical temporal memoryGenetic programmingHierarchical clusteringTrees can be used to represent and manipulate various mathematical structures, such as:Paths through an arbitrary node-and-edge graph (including multigraphs), by making multiple nodes in the tree for each graph node used in multiple pathsAny mathematical hierarchyTree structures are often used for mapping the relationships between things, such as:Components and subcomponents which can be visualized in an exploded-view drawingSubroutine calls used to identify which subroutines in a program call other subroutines non recursivelyInheritance of DNA among species by evolution, of source code by software projects (e.g. Linux distribution timeline), of designs in various types of cars, etc.The contents of hierarchical namespacesJSON and YAML documents can be thought of as trees, but are typically represented by nested lists and dictionaries.A node is a structure which may contain data and connections to other nodes, sometimes called edges or links. Each node in a tree has zero or more child nodes, which are below it in the tree (by convention, trees are drawn with descendants going downwards). A node that has a child is called the child's parent node (or superior). All nodes have exactly one parent, except the topmost root node, which has none. A node might have many ancestor nodes, such as the parent's parent.  Child nodes with the same parent are sibling nodes. Typically siblings have an order, with the first one conventionally drawn on the left. Some definitions allow a tree to have no nodes at all, in which case it is called empty. An internal node (also known as an inner node, inode for short, or branch node) is any node of a tree that has child nodes. Similarly, an external node (also known as an outer node, leaf node, or terminal node) is any node that does not have child nodes.The height of a node is the length of the longest downward path to a leaf from that node. The height of the root is the height of the tree. The depth of a node is the length of the path to its root (i.e., its root path). When using zero-based counting, the root node has depth zero, leaf nodes have height zero, and a tree with only a single node (hence both a root and leaf) has depth and height zero. Conventionally, an empty tree (tree with no nodes, if such are allowed) has height −1.Each non-root node can be treated as the root node of its own subtree, which includes that node and all its descendants.[a][1]Other terms used with trees:Neighbor Parent or child.Ancestor A node reachable by repeated proceeding from child to parent.Descendant A node reachable by repeated proceeding from parent to child. Also known as subchild.Degree For a given node, its number of children. A leaf has necessarily degree zero.Degree of tree The degree of a tree is the maximum degree of a node in the tree.Distance The number of edges along the shortest path between two nodes.Level The level of a node is the number of edges along theunique path between it and the root node.[2] This is the same as depth when using zero-based counting.Width The number of nodes in a level.Breadth The number of leaves.Forest A set of one or more disjoint trees.Ordered tree A rooted tree in which an ordering is specified for the children of each vertex. The book The Art of Computer Programming uses the term oriented tree.[3]Size of a tree Number of nodes in the tree.Graph and treesearch algorithmsα–β pruningBacktrackingBeam searchBest-first searchBranch &amp; boundBreadth-First Search (BFS)British MuseumDepth-First Search (DFS)Hill climbingIterative Deepening DFS (IDDFS)Lexicographic BFSShortest pathA*B*Bellman–FordBidirectional searchD*Dijkstra'sFloyd–WarshallFringe searchIterative Deepening (IDA*)Johnson'sJump point searchKruskal'sLifelong Planning A* (LPA*)PathfindingSMA*ListsGraph algorithmsSearch algorithmsList of graph algorithmsRelated topicsDynamic programmingGraph coloringGraph traversalMinimum spanning treeSearch gamesThreaded binary treeTree traversalEnumerating all the itemsEnumerating a section of a treeSearching for an itemAdding a new item at a certain position on the treeDeleting an itemPruning: Removing a whole section of a treeGrafting: Adding a whole section to a treeFinding the root for any nodeFinding the lowest common ancestor of two nodesStepping through the items of a tree, by means of the connections between parents and children, is called walking the tree, and the action is a walk of the tree. Often, an operation might be performed when a pointer arrives at a particular node. A walk in which each parent node is traversed before its children is called a pre-order walk; a walk in which the children are traversed before their respective parents are traversed is called a post-order walk; a walk in which a node's left subtree, then the node itself, and finally its right subtree are traversed is called an in-order traversal. (This last scenario, referring to exactly two subtrees, a left subtree and a right subtree, assumes specifically a binary tree.) A level-order walk effectively performs a breadth-first search over the entirety of a tree; nodes are traversed level by level, where the root node is visited first, followed by its direct child nodes and their siblings, followed by its grandchild nodes and their siblings, etc., until all nodes in the tree have been traversed.There are many different ways to represent trees. In working memory, nodes are typically dynamically allocated records with pointers to their children, their parents, or both, as well as any associated data.  If of a fixed size, the nodes might be stored in a list. Nodes and relationships between nodes might be stored in a separate special type of adjacency list. In relational databases, nodes are typically represented as table rows, with indexed row IDs facilitating pointers between parents and children. Nodes can also be stored as items in an array, with relationships between them determined by their positions in the array (as in a binary heap).A binary tree can be implemented as a list of lists: the head of a list (the value of the first term) is the left child (subtree), while the tail (the list of second and subsequent terms) is the right child (subtree). This can be modified to allow values as well, as in Lisp S-expressions, where the head (value of first term) is the value of the node, the head of the tail (value of second term) is the left child, and the tail of the tail (list of third and subsequent terms) is the right child.Ordered trees can be naturally encoded by finite sequences, for example with natural numbers.[4]As an abstract data type, the abstract tree type  with values of some type  is defined, using the abstract forest type  (list of trees), by the functions:value:  → children:  → nil: () → node:  ×  → with the axioms:value(node(, )) = children(node(, )) = In terms of type theory, a tree is an inductive type defined by the constructors  (empty forest) and  (tree with root node with given value and children).Viewed as a whole, a tree data structure is an ordered tree, generally with values attached to each node. Concretely, it is (if required to be non-empty):A rooted tree with the "away from root" direction (a more narrow term is an "arborescence"), meaning:A directed graph,whose underlying undirected graph is a tree (any two vertices are connected by exactly one simple path),with a distinguished root (one vertex is designated as the root),which determines the direction on the edges (arrows point away from the root; given an edge, the node that the edge points from is called the parent and the node that the edge points to is called the child), together with:an ordering on the child nodes of a given node, anda value (of some data type) at each node.Often trees have a fixed (more properly, bounded) branching factor (outdegree), particularly always having two child nodes (possibly empty, hence at most two non-empty child nodes), hence a "binary tree".Allowing empty trees makes some definitions simpler, some more complicated: a rooted tree must be non-empty, hence if empty trees are allowed the above definition instead becomes "an empty tree or a rooted tree such that ...". On the other hand, empty trees simplify defining fixed branching factor: with empty trees allowed, a binary tree is a tree such that every node has exactly two children, each of which is a tree (possibly empty). The complete sets of operations on the tree must include the fork operation.[]Tree structure (general)Category:Trees (data structures) (catalogs types of computational trees)Donald Knuth. The Art of Computer Programming: Fundamental Algorithms, Third Edition. Addison-Wesley, 1997. ISBN 0-201-89683-4 . Section 2.3: Trees, pp. 308–423.Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms, Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7. Section 10.4: Representing rooted trees, pp. 214–217. Chapters 12–14 (Binary Search Trees, Red–Black Trees, Augmenting Data Structures), pp. 253–320.Data Trees as a Means of Presenting Complex Data Analysis by Sally Knipe on August 8, 2013Description from the Dictionary of Algorithms and Data StructuresCRAN package data.tree – implementation of a tree data structure in the R programming languageWormWeb.org: Interactive Visualization of the C. elegans Cell Tree – Visualize the entire cell lineage tree of the nematode C. elegans (javascript)Binary Trees by L. Allison