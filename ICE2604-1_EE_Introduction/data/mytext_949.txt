splay_treeSplay treeTypetreeInvented1985Invented byDaniel Dominic Sleator and Robert Endre TarjanComplexities in big O notationSpace complexitySpaceO(n)Time complexityFunctionAmortizedWorst CaseSearchO(log n)[1]O(n)[2]InsertO(log n)[1]O(n)DeleteO(log n)[1]O(n)A splay tree is a binary search tree with the additional property that recently accessed elements are quick to access again.  Like self-balancing binary search trees, a splay tree performs basic operations such as insertion, look-up and removal in O(log n) amortized time. For random access patterns drawn from a non-uniform random distribution, their amortized time can be faster than logarithmic, proportional to the entropy of the access pattern. For many patterns of non-random operations, also, splay trees can take better than logarithmic time, without requiring advance knowledge of the pattern. According to the unproven dynamic optimality conjecture, their performance on all access patterns is within a constant factor of the best possible performance that could be achieved by any other self-adjusting binary search tree, even one selected to fit that pattern. The splay tree was invented by Daniel Sleator and Robert Tarjan in 1985.[1]All normal operations on a binary search tree are combined with one basic operation, called splaying. Splaying the tree for a certain element rearranges the tree so that the element is placed at the root of the tree.  One way to do this with the basic search operation is to first perform a standard binary tree search for the element in question, and then use tree rotations in a specific fashion to bring the element to the top. Alternatively, a top-down algorithm can combine the search and the tree reorganization into a single phase.Good performance for a splay tree depends on the fact that it is self-optimizing, in that frequently accessed nodes will move nearer to the root where they can be accessed more quickly. The worst-case height—though unlikely—is O(n), with the average being O(log n).Having frequently-used nodes near the root is an advantage for many practical applications (also see locality of reference), and is particularly useful for implementing caches and garbage collection algorithms.Advantages include:Comparable performance: Average-case performance is as efficient as other trees.[3]Small memory footprint: Splay trees do not need to store any bookkeeping data.The most significant disadvantage of splay trees is that the height of a splay tree can be linear.[2]  For example, this will be the case after accessing all n elements in non-decreasing order.  Since the height of a tree corresponds to the worst-case access time, this means that the actual cost of a single operation can be high. However the amortized access cost of this worst case is logarithmic, O(log n).  Also, the expected access cost can be reduced to O(log n) by using a randomized variant.[4]The representation of splay trees can change even when they are accessed in a 'read-only' manner (i.e. by find operations).  This complicates the use of such splay trees in a multi-threaded environment.  Specifically, extra management is needed if multiple threads are allowed to perform find operations concurrently. This also makes them unsuitable for general use in purely functional programming, although even there they can be used in limited ways to implement priority queues.Finally, when the access pattern is random, the additional splaying overhead adds a significant constant factor to the cost compared to less-dynamic alternatives.When a node x is accessed, a splay operation is performed on x to move it to the root. To perform a splay operation we carry out a sequence of splay steps, each of which moves x closer to the root. By performing a splay operation on the node of interest after every access, the recently accessed nodes are kept near the root and the tree remains roughly balanced, so that we achieve the desired amortized time bounds.Each particular step depends on three factors:Whether x is the left or right child of its parent node, p,whether p is the root or not, and if notwhether p is the left or right child of its parent, g (the grandparent of x).It is important to remember to set gg (the great-grandparent of x) to now point to x after any splay operation. If gg is null, then x obviously is now the root and must be updated as such.There are three types of splay steps, each of which has two symmetric variants: left- and right-handed. For the sake of brevity, only one of these two is shown for each type. (In the following diagrams, circles indicate nodes of interest and triangles indicate sub-trees of arbitrary size.) The three types of splay steps are:Zig step: this step is done when p is the root. The tree is rotated on the edge between x and p.  Zig steps exist to deal with the parity issue, will be done only as the last step in a splay operation, and only when x has odd depth at the beginning of the operation.Zig-zig step: this step is done when p is not the root and x and p are either both right children or are both left children. The picture below shows the case where x and p are both left children. The tree is rotated on the edge joining p with its parent g, then rotated on the edge joining x with p. Note that zig-zig steps are the only thing that differentiate splay trees from the rotate to root method introduced by Allen and Munro[5] prior to the introduction of splay trees.Zig-zag step: this step is done when p is not the root and x is a right child and p is a left child or vice versa (x is left, p is right). The tree is rotated on the edge between p and x, and then rotated on the resulting edge between x and g.Given two trees S and T such that all elements of S are smaller than the elements of T, the following steps can be used to join them to a single tree:Splay the largest item in S. Now this item is in the root of S and has a null right child.Set the right child of the new root to T.Given a tree and an element x, return two new trees: one containing all elements less than or equal to x and the other containing all elements greater than x. This can be done in the following way:Splay x. Now it is in the root so the tree to its left contains all elements smaller than x and the tree to its right contains all element larger than x.Split the right subtree from the rest of the tree.To insert a value x into a splay tree:Insert x as with a normal binary search tree.when an item is inserted, a splay is performed.As a result, the newly inserted node x becomes the root of the tree.Alternatively:Use the split operation to split the tree at the value of x to two sub-trees: S and T.Create a new tree in which x is the root, S is its left sub-tree and T its right sub-tree.To delete a node x, use the same method as with a binary search tree:If x has two children:Swap its value with that of either the rightmost node of its left sub tree (its in-order predecessor) or the leftmost node of its right subtree (its in-order successor).Remove that node instead.In this way, deletion is reduced to the problem of removing a node with 0 or 1 children. Unlike a binary search tree, in a splay tree after deletion, we splay the parent of the removed node to the top of the tree.Alternatively:The node to be deleted is first splayed, i.e. brought to the root of the tree and then deleted.  leaves the tree with two sub trees.The two sub-trees are then joined using a "join" operation.Splaying, as mentioned above, is performed during a second, bottom-up pass over the access path of a node. It is possible to record the access path during the first pass for use during the second, but that requires extra space during the access operation.  Another alternative is to keep a parent pointer in every node, which avoids the need for extra space during access operations but may reduce overall time efficiency because of the need to update those pointers.[1]Another method which can be used is based on the argument that we can restructure the tree on our way down the access path instead of making a second pass. This top-down splaying routine uses three sets of nodes – left tree, right tree and middle tree. The first two contain all items of original tree known to be less than or greater than current item respectively. The middle tree consists of the sub-tree rooted at the current node. These three sets are updated down the access path while keeping the splay operations in check. Another method, semisplaying, modifies the zig-zig case to reduce the amount of restructuring done in all operations.[1][6]Below there is an implementation of splay trees in C++, which uses pointers to represent each node on the tree. This implementation is based on bottom-up splaying version and uses the second method of deletion on a splay tree.  Also, unlike the above definition, this C++ version does not splay the tree on finds – it only splays on insertions and deletions, and the find operation, therefore, has linear time complexity.A simple amortized analysis of static splay trees can be carried out using the potential method. Define:size(r) = the number of nodes in the sub-tree rooted at node r (including r).rank(r) = log2(size(r)).Φ = the sum of the ranks of all the nodes in the tree.Φ will tend to be high for poorly balanced trees and low for well-balanced trees.To apply the potential method, we first calculate ΔΦ: the change in the potential caused by a splay operation. We check each case separately. Denote by rank' the rank function after the operation. x, p and g are the nodes affected by the rotation operation (see figures above).ΔΦ= rank'(p) − rank(p) + rank'(x) − rank(x)  [since only p and x change ranks]= rank'(p) − rank(x)[since rank'(x)=rank(p)]≤ rank'(x) − rank(x)[since rank'(p)&lt;rank'(x)]ΔΦ= rank'(g) − rank(g) + rank'(p) − rank(p) + rank'(x) − rank(x)=  rank'(g) + rank'(p) − rank(p) − rank(x)  [since rank'(x)=rank(g)]≤  rank'(g) + rank'(x) − 2 rank(x)[since rank(x)&lt;rank(p) and rank'(x)&gt;rank'(p)]≤  3(rank'(x)−rank(x)) − 2[due to the concavity of the log function]ΔΦ= rank'(g) − rank(g) + rank'(p) − rank(p) + rank'(x) − rank(x)≤ rank'(g) + rank'(p) − 2 rank(x)  [since rank'(x)=rank(g) and rank(x)&lt;rank(p)]≤ 3(rank'(x)−rank(x)) − 2[due to the concavity of the log function]The amortized cost of any operation is ΔΦ plus the actual cost. The actual cost of any zig-zig or zig-zag operation is 2 since there are two rotations to make. Hence:amortized-cost= cost + ΔΦ≤ 3(rank'(x)−rank(x))When summed over the entire splay operation, this telescopes to 3(rank(root)−rank(x)) which is O(log n).  The Zig operation adds an amortized cost of 1, but there's at most one such operation.So now we know that the total amortized time for a sequence of m operations is:To go from the amortized time to the actual time, we must add the decrease in potential from the initial state before any operation is done (Φi) to the final state after all operations are completed (Φf).where the last inequality comes from the fact that for every node x, the minimum rank is 0 and the maximum rank is log(n).Now we can finally bound the actual time:The above analysis can be generalized in the following way.Assign to each node r a weight w(r).Define size(r) = the sum of weights of nodes in the sub-tree rooted at node r (including r).Define rank(r) and Φ exactly as above.The same analysis applies and the amortized cost of a splaying operation is again:where W is the sum of all weights.The decrease from the initial to the final potential is bounded by:since the maximum size of any single node is W and the minimum is w(x).Hence the actual time is bounded by:There are several theorems and conjectures regarding the worst-case runtime for performing a sequence S of m accesses in a splay tree containing n elements.In addition to the proven performance guarantees for splay trees there is an unproven conjecture of great interest from the original Sleator and Tarjan paper.  This conjecture is known as the dynamic optimality conjecture and it basically claims that splay trees perform as well as any other binary search tree algorithm up to a constant factor.Dynamic Optimality Conjecture:[1] Let  be any binary search tree algorithm that accesses an element  by traversing the path from the root to  at a cost of , and that between accesses can make any rotations in the tree at a cost of 1 per rotation.  Let  be the cost for  to perform the sequence  of accesses.  Then the cost for a splay tree to perform the same accesses is .There are several corollaries of the dynamic optimality conjecture that remain unproven:Traversal Conjecture:[1] Let  and  be two splay trees containing the same elements.  Let  be the sequence obtained by visiting the elements in  in preorder (i.e., depth first search order).  The total cost of performing the sequence  of accesses on  is .Deque Conjecture:[11][13][14] Let  be a sequence of  double-ended queue operations (push, pop, inject, eject).  Then the cost of performing  on a splay tree is .Split Conjecture:[6] Let  be any permutation of the elements of the splay tree.  Then the cost of deleting the elements in the order  is .In order to reduce the number of restructuring operations, it is possible to replace the splaying with semi-splaying, in which an element is splayed only halfway towards the root.[1][2]Another way to reduce restructuring is to do full splaying, but only in some of the access operations – only when the access path is longer than a threshold, or only in the first m access operations.[1]AVL treeB-treeFinger treeGeometry of binary search treesIacono's working set structureLink/cut treeList of data structuresScapegoat treeSplaysort, a sorting algorithm using splay treesT-treeTreapTree rotationTreesZipper (data structure)Albers, Susanne; Karpinski, Marek (28 February 2002). "Randomized Splay Trees: Theoretical and Experimental Results" . Information Processing Letters. 81 (4): 213–221. doi:10.1016/s0020-0190(01)00230-7.Allen, Brian; Munro, Ian (October 1978). "Self-organizing binary search trees". Journal of the ACM. 25 (4): 526–535. doi:10.1145/322092.322094. S2CID 15967344.Brinkmann, Gunnar; Degraer, Jan; De Loof, Karel (January 2009). "Rehabilitation of an unloved child: semi-splaying" . Software: Practice and Experience. 39 (1): 33–45. CiteSeerX . doi:10.1002/spe.v39:1. hdl:11382/102133. The results show that semi-splaying, which was introduced in the same paper as splaying, performs better than splaying under almost all possible conditions. This makes semi-splaying a good alternative for all applications where normally splaying would be applied. The reason why splaying became so prominent while semi-splaying is relatively unknown and much less studied is hard to understand.Cole, Richard; Mishra, Bud; Schmidt, Jeanette; Siegel, Alan (January 2000). "On the Dynamic Finger Conjecture for Splay Trees. Part I: Splay Sorting log n-Block Sequences". SIAM Journal on Computing. 30 (1): 1–43. CiteSeerX . doi:10.1137/s0097539797326988.Cole, Richard (January 2000). "On the Dynamic Finger Conjecture for Splay Trees. Part II: The Proof". SIAM Journal on Computing. 30 (1): 44–85. CiteSeerX . doi:10.1137/S009753979732699X.Elmasry, Amr (April 2004). "On the sequential access theorem and Deque conjecture for splay trees". Theoretical Computer Science. 314 (3): 459–466. doi:.Goodrich, Michael; Tamassia, Roberto; Goldwasser, Michael (2014). Data Structures and Algorithms in Java (6 ed.). Wiley. p. 506. ISBN 978-1-118-77133-4.Grinberg, Dennis; Rajagopalan, Sivaramakrishnan; Venkatesan, Ramarathnam; Wei, Victor K. (1995). "Splay trees for data compression".  In Clarkson, Kenneth L. (ed.). Proceedings of the Sixth Annual ACM-SIAM Symposium on Discrete Algorithms, 22–24 January 1995. San Francisco, California, USA. ACM/SIAM. pp. 522–530. Average depth of access in a splay tree is proportional to the entropy.Knuth, Donald (1997). The Art of Computer Programming. Vol. 3: Sorting and Searching (3rd ed.). Addison-Wesley. p. 478. ISBN 0-201-89685-0. The time needed to access data in a splay tree is known to be at most a small constant multiple of the access time of a statically optimum tree, when amortized over any series of operations.Lucas, Joan M. (1991). "On the Competitiveness of Splay Trees: Relations to the Union-Find Problem". On-line Algorithms: Proceedings of a DIMACS Workshop, February 11–13, 1991. Series in Discrete Mathematics and Theoretical Computer Science. Vol. 7. Center for Discrete Mathematics and Theoretical Computer Science. pp. 95–124. ISBN 0-8218-7111-0.Pettie, Seth (2008). Splay Trees, Davenport-Schinzel Sequences, and the Deque Conjecture . Proc. 19th ACM-SIAM Symposium on Discrete Algorithms. Vol. 0707. pp. 1115–1124. arXiv:. Bibcode:2007arXiv0707.2160P.Sleator, Daniel D.; Tarjan, Robert E. (1985). "Self-Adjusting Binary Search Trees" . Journal of the ACM. 32 (3): 652–686. doi:10.1145/3828.3835. S2CID 1165848.Sundar, Rajamani (1992). "On the Deque conjecture for the splay algorithm". Combinatorica. 12 (1): 95–124. doi:10.1007/BF01191208. S2CID 27422556.Tarjan, Robert E. (1985). "Sequential access in splay trees takes linear time". Combinatorica. 5 (4): 367–378. doi:10.1007/BF02579253. S2CID 34757821.NIST's Dictionary of Algorithms and Data Structures: Splay TreeImplementations in C and Java (by Daniel Sleator)Pointers to splay tree visualizationsFast and efficient implementation of Splay treesTop-Down Splay Tree Java implementationZipper Trees