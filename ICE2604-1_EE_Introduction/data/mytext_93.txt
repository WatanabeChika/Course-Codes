best-first_searchGraph and treesearch algorithmsα–β pruningBacktrackingBeam searchBest-first searchBranch &amp; boundBreadth-First Search (BFS)British MuseumDepth-First Search (DFS)Hill climbingIterative Deepening DFS (IDDFS)Lexicographic BFSShortest pathA*B*Bellman–FordBidirectional searchD*Dijkstra'sFloyd–WarshallFringe searchIterative Deepening (IDA*)Johnson'sJump point searchKruskal'sLifelong Planning A* (LPA*)PathfindingSMA*ListsGraph algorithmsSearch algorithmsList of graph algorithmsRelated topicsDynamic programmingGraph coloringGraph traversalMinimum spanning treeSearch gamesThreaded binary treeTree traversalBest-first search is a class of search algorithms, which explore a graph by expanding the most promising node chosen according to a specified rule.Judea Pearl described the best-first search as estimating the promise of node n by a "heuristic evaluation function  which, in general, may depend on the description of n, the description of the goal, the information gathered by the search up to that point, and most importantly, on any extra knowledge about the problem domain."[1][2]Some authors have used "best-first search" to refer specifically to a search with a heuristic that attempts to predict how close the end of a path is to a solution (or, goal), so that paths which are judged to be closer to a solution (or, goal) are extended first. This specific type of search is called greedy best-first search[2] or pure heuristic search.[3]Efficient selection of the current best candidate for extension is typically implemented using a priority queue.The A* search algorithm is an example of a best-first search algorithm, as is B*. Best-first algorithms are often used for path finding in combinatorial search. Neither A* nor B* is a greedy best-first search, as they incorporate the distance from the start in addition to estimated distances to the goal.Using a greedy algorithm, expand the first successor of the parent. After a successor is generated:[4]If the successor's heuristic is better than its parent, the successor is set at the front of the queue (with the parent reinserted directly behind it), and the loop restarts.Else, the successor is inserted into the queue (in a location determined by its heuristic value). The procedure will evaluate the remaining successors (if any) of the parent.Below is a pseudocode example of this algorithm, where queue represents a priority queue which orders nodes based on their heuristic distances from the goal. This implementation keeps track of visited nodes, and can therefore be used for undirected graphs. It can be modified to retrieve the path.procedure GBS(start, target) is:  mark start as visited  add start to queue  while queue is not empty do:    current_node ← vertex of queue with min distance to target    remove current_node from queue    foreach neighbor n of current_node do:      if n not in visited then:        if n is target:          return n        else:          mark n as visited          add n to queue  return failure Beam searchA* search algorithmDijkstra's algorithmWikibooks: Artificial Intelligence: Best-First Search